c************************************************************************
c                                                                       *
c                                                                       *
c     this code permits to visualize the flow generated by the 
c     code in CODESCH10/PIP
c
c     All variables were calculated in a staggered grid:                 *
c                                                                       *
c        flux variables were introduced 
c        q1=vtheta*r, q2= r*vr, q3= vz                                    *      
c                                                                       *
c     visualizations in planes can be performed as well
c     as the visualization of the full field if i3dou =1
c                                                                       *
c                                                                       *
c************************************************************************
      program main                                                      
      include 'param.f'
      common/timavg/timav
      common/timini/timei
      common/npjet/n2t
      character*38 namdir,namdir1,namdir2
      common/ichtim/itimcf,itimcf1
      common/namdi/namdir,namdir1,namdir2
      common/nbal/nba,ibudg
      common/inom/inorm
      open(15,file='visuapipe.d')
  101 format(a38)
      read(15,301) dummy                                                
      read(15,*) n1,n2,n3,nsst,nwrit,nread,ipsc0
      read(15,301) dummy                                                
      read(15,*) n1p,n2p,n3p,nprde                                      
      read(15,301) dummy                                                
      read(15,*) ntst,nprint,npin,ireset ,timei,npouth
      read(15,301) dummy                                                
      read(15,*) alx3p                                                  
      read(15,301) dummy                                                
      read(15,*) re,vper,dt,pran,pscwal
      read(15,301) dummy                                                
      read(15,*) r0,epsil,lamb
      read(15,301) dummy                                                
      read(15,*) cflc,scfl,t0med1,t0pres                       
      read(15,301) dummy                                                
      read(15,*) ros                                                    
      read(15,301) dummy                                                
      read(15,*)nini,nfin,nstri,irid 
c$$$$$ parameters for non uniform grid (r distribution) $$$$$$$$$$$$$$$$$
      read(15,301) dummy                                                
      read(15,*)strr,rext,rint,rmed1
      read(15,301) dummy                                                
      read(15,*)istr,rmed,etdp,strb,n2t
c$$$$$$$parameters for boundary conditions $$$$$$$$$$$$$$$$$$$$$$$$$$$$$
      read(15,301) dummy
      read(15,*) iav     
      read(15,301) dummy
      read(15,*) ialvo,icorspe,timav,ibudg
      read(15,301) dummy
      read(15,*) ichrc
      read(15,301) dummy
      read(15,*)strro,rexto,rinto,rmed1o
      read(15,301) dummy
      read(15,*)istro,rmedo,etdpo,strbo,n2to
301   format(a4)                                                        
c
c   inorm=1 normalize the fluctuating quantities by
c   the appropriate rms value
c
      write(6,*) 'enter  inorm'
      read(5,*) inorm
      icfl=scfl
      ime1t0=t0med1
      ipr0=t0pres
c
      pi=2.*asin(1.)                                                    
      alx3d=2.*pi*alx3p
      tfini=dt*ntst                                                     
      tfin=tfini                                                        
      n1m=n1-1                                                          
      n2m=n2-1                                                          
      n3m=n3-1                                                          
      n3mh=n3m/2+1                                                      
      if(n1m.eq.1) then
      iaxsy = 0
       else
      iaxsy=1
       endif
c                                                                       
c                                                                       
      alx3=alx3d                                                        
c                                                                       
      call openfi
c                                                                       
c     assign coefficients for time marching schemes                     
c
      write(6,*)'*****************************************************'
      write(32,*)'*****************************************************'
      write(6,*)'*                                                    *'
      write(32,*) '*                                                  *'
      write(6,*)'*               TURBULENT PIPE WITH ROTATION         *'
      write(32,*)'*              TURBULENT PIPE WITH ROTATION         *'
      write(6,*)'*      VISUALIZATION                                 *'
      write(32,*)'*     VISUALIZATION                                 *'
      write(6,*)'*****************************************************'
      write(32,*)'*****************************************************'
      write(6,*)'  '
      write(32,*) '  '
      write(6,*)'  '
      write(32,*) '  '
      write(6,112)alx3d,r0                                              
      write(32,112)alx3d,r0                                             
  112 format(10x,'domain dimensions L_z =',f8.5,' L_r = ',f8.5)                
      write(6,*)'  '
      write(32,*) '  '
      write(6,*)'  '
      write(32,*) '  '
c                                                                       
      call gcurv                                                        
                                                                        
      stop                                                              
      end                                                               
c************************************************************************
c************************************************************************
c                                                                       *
c    These variables were used                                          *
c     q1=v(theta)*r  q2=v(r)*r     q3=v(zeta)                           *
c                                                                       *
c                                                                       *
c************************************************************************
c************************************************************************
      subroutine gcurv                                                  
      include 'param.f'
      common/tima3/tiax3d
      common/timavg/timav
      common/timini/timei
      common/nbal/nba,ibudg
      common/iolfil/iovco,iohel
c
c                                                                       
c     grid definition, indices and mesh size calculation                          
c                                                                       
      call meshes
      call indic                                                        
      call cordin                                                       
c
c     print the grid
c
      read(15,301) dummy
301   format(a4)                                                        
c
c   locations where the visualizations on planes are done
c
       read(15,*) i3dou,njumk,njumj
      read(15,301) dummy
       read(15,*) npq,(jprq(n),n=1,npq)
       write(6,*) 'njumk,  njumj ',njumk,njumj 
       do n=1,npq
       write(6,*)'n,jprq(n) ',n,jprq(n)
       enddo
       ioldf=0
       iovco=0
       iohel=0
c
c    print the files with the grid in accord to the TURB3D
c    requirements
c
      call pricor
c
c
c     print some informations on the run
c
      write(6,*) '  '
      write(32,*) '  '
      write(6,754)n1,n2,n3                                              
      write(32,754)n1,n2,n3                                             
  754 format(10x,'number of grid points :'/                             
     1      5x,'n1=',i4,2x,'n2=',i4,2x,'n3=',i4/)                       
      write(6,*) '  '
      write(32,*) '  '
      write(6,756)n1p,n2p,n3p                                              
      write(32,756)n1p,n2p,n3p                                             
  756 format(10x,'plotting stride  :'/                             
     1      5x,'n1p=',i4,2x,'n2p=',i4,2x,'n3p=',i4/)                       
      write(6,*) '  '
      write(32,*) '  '
      write(6,755) re,ros
      write(32,755) re,ros
  755 format(3x,' Parameters of the flow: ',/,
     1 ' Reynolds number = ',e10.3,3x,' Rossby number = ',e10.3) 
      write(6,*) '  '
      write(32,*) '  '
      ren=re                                                            
      time=0.                                                           
      ntii=0                                                            
      beta=dt/re*0.5                                                    
c
c  evaluation of metric quantities for the inversion
c
      call coetar
  159 format(1x,i4,2x,e10.4,3e10.3,3(1x,e10.4,1x,i3,1x,i3),e10.3)
c
c*******************************************************
c
c                                                                       
      ncount=0
      ntii=1
       time=timei
      ntime=ntii
c                                                                       
c     in tscheme the field is read 
c     
      call tschem(ntime,time,ncount)
c
c   here the flow visualizations files are written
c
      call outpf(time,nav)
c                                                                       
      return                                                            
      end                                                               
c************************************************************************
c                                                                       *
c ****************************** subrout coetar  **********************  *
c                                                                       *
c    this subroutine calculates the coefficients for the              *
c    integration in the radial direction with non-uniform coor. trasf.  *
c   NEW VERSION FOR q\theta=v\theta*r
c    Bound. Cond. 1st oreder accurate
c                                                                       *
c************************************************************************
      subroutine coetar
      include 'param.f'
      common/cor3j/ap3j(m2),ac3j(m2),am3j(m2)
c
c  *******   coefficients in several eq. funct of j
c
      do jc=1,n2m
      udx1q(jc)=dx1q/rm(jc)**2
      volz(jc)=rm(jc)*g2rm(jc)/(dx1*dx2*dx3)
      enddo
c
c  ***********  coefficients for q3   inner points
c
      do jc=2,n2m-1
      jp=jc+1
      a22=dx2q/g2rm(jc)/rm(jc)
      a22p= +a22*rc(jp)/g2rc(jp)
      a22m= +a22*rc(jc)/g2rc(jc)
      ap3j(jc)=a22p
      am3j(jc)=a22m
      ac3j(jc)=-(a22p+a22m)
      enddo
c
c    r=0 gives the following b.c. at axis  equiv. to dq3/dr=0
c
      jc=1
      jp=jc+1
      ugmm2=dx2q/g2rm(jc)/rm(jc)
      am3j(jc)=0.
      ac3j(jc)=ugmm2*rc(jp)/g2rc(jp)
      ap3j(jc)=(rc(jp)/g2rc(jp))*ugmm2
c
c    q3=0 has been assumed at the wall boundary
c
      jc=n2m
      jp=jc+1
      ugmm2=dx2q/g2rm(jc)/rm(jc)
      am3j(jc)=rc(jc)/g2rc(jc)*ugmm2
      ac3j(jc)=ugmm2*rc(jc)/g2rc(jc)
      ap3j(jc)=ugmm2*rc(jp)/g2rc(jp)*2.
c
      return
      end
c************************************************************************
c                                                                       *
c ****************************** subrout prgqso  ********************** *
c  this subroutine performs the calculation of pressure gradient and    *
c                                                                       *
c************************************************************************
      subroutine prgqso              
      include 'param.f'
      common/cor3j/ap3j(m2),ac3j(m2),am3j(m2)
      pi=2.*asin(1.)
      alre=al/ren
c
c
c    Pressure gradient
c
      s3tot=0.
      do kc=1,n3m
      km=kmv(kc)
      kp=kpv(kc)
            do jc=1,n2m
                  do ic=1,n1m
                  im=imv(ic)
                  ip=ipv(ic)
c
c   11 second derivatives of q3
c
      dq31=(q3(ip,jc,kc)
     1     -q3(ic,jc,kc)*2.
     1     +q3(im,jc,kc))*udx1q(jc)
c
c   33 second derivatives of q3
c
      dq33=(q3(ic,jc,kp)
     1     -q3(ic,jc,kc)*2.
     1     +q3(ic,jc,km))*dx3q
      dcq3=dq31+dq33
      s3tot=s3tot+dcq3*volz(jc)/ren
                  enddo

            enddo
      enddo
c     c
c   add second derivatie in r
c
      do kc=1,n3m
            do jc=2,n2m-1
            jm=jmv(jc)
            jp=jpv(jc)
                  do ic=1,n1m
c
c   22 second derivatives of q3
c
      dq32= q3(ic,jp,kc)*ap3j(jc)
     1     -q3(ic,jc,kc)*(ap3j(jc)+am3j(jc))
     1     +q3(ic,jm,kc)*am3j(jc)
      s3tot=s3tot+dq32*volz(jc)/ren
                  enddo
            enddo
      enddo
c
c   22 second derivatives of q3  at r=n2m
c
      jc=n2m
      jm=jc-1
      do kc=1,n3m
                  do ic=1,n1m
c
c   22 second derivatives of q3
c
      dq32=-q3(ic,jc,kc)*(ap3j(jc)+ac3j(jc))
     1     +q3(ic,jm,kc)*am3j(jc)
      s3tot=s3tot+dq32*volz(jc)/ren
                  enddo

      enddo
c     c
c   add second derivatie in r at r=0
c
      jc=1
      jp=jc+1
      do kc=1,n3m
                  do ic=1,n1m
c
c   22 second derivatives of q3
c
      dq32= q3(ic,jp,kc)*ap3j(jc)
     1     -q3(ic,jc,kc)*ap3j(jc)
      s3tot=s3tot+dq32*volz(jc)/ren
                  enddo
      enddo
       dp3ns=s3tot/(pi*alx3d)
      return
      end
c                                                                       
c  **************  subrout tschem                                       
c                                                                       
      subroutine tschem(ntime,time,ncount)
      include 'param.f'
      common/timavg/timav
      common/timini/timei
      common/nbal/nba,ibudg
      dimension e1t(m2),e2t(m2),e3t(m2)
      dimension e1stt(m2),e2stt(m2),e3stt(m2)
      dimension e1stz(m2),e2stz(m2),e3stz(m2)
      dimension ene1(m2,m1m),ene2(m2,m1m),ene3(m2,m1m)
      dimension enep(m2,m1m)
      common/wavin/dlx1,dlx3,dkk1,dkk3
c
c    the field is read
c
          call inirea(ntime,time,ntt,ncount,nap)           
          call divgck(dmax,dtot)                                 
c         write(6,900)dmax,dtot                 ,ntime
          write(32,900)dmax,dtot                ,ntime
  900   format(3x,'maxima local and global divergence of the read field',
     1     /,' dmax = ',e11.4,' dtot = ',e11.4,'ntime=',i5)
          call prgqso
c
c    mean velocity profiles
c
      call velc
c
c    mean vorticity profiles
c
      call vorc
      return                                                            
      end                                                               
c                                                                       
c  ************************* subrout,velc  **********************  
c                                                                       
c     this subroutine calculates the velocity at the centre of the cell
c     and then the fluctuations
c                                                                       
      subroutine velc                    
      include 'param.f'
      avgn=1./(float(n1m*n3m))
      vl123=1./(rc(n2)*n1m*n2m*n3m)
      volto=1./(pi*alx3d)
c
c   axial velocity at the axis
c
      do kc=1,n3m
      q3ax(kc)=0.
      do ic=1,n1m
      q3ax(kc)=q3ax(kc)+q3(ic,1,kc)
      enddo
      q3ax(kc)=q3ax(kc)/n1m
      enddo
c
c  velocities at the center of the cell
c
      do jc=1,n2m                                                     
      jm=jmv(jc)                                                        
      jp=jc+1
      do l=1,3
      vmed(l,jc)=0.
      vmepo(l,jc)=0.
      enddo
      do kc=1,n3m 
      do ic=1,n1m                                                     
      if(jc.eq.1) then
      q2akc= (q2(ic,jp,kc) - q2(isym(ic),jp,kc))*0.5/rc(jp)
      dphc=(q2akc+q2(ic,jp,kc)/rc(jp))*.5
       else
      dphc=
     1  (    q2(ic,jc,kc)/rc(jc)+q2(ic,jp,kc)/rc(jp))*0.5
      q2akc=q2(ic,jc,kc)/rc(jc)
      end if
      dqc=
     1  (    q1(ic,jc,kc)+q1(ipv(ic),jc,kc) )*0.5/rm(jc)
      qcapc=(q3(ic,jc,kc)+q3(ic,jc,kpv(kc)) )*0.5 
      vmed(2,jc)=vmed(2,jc)+dphc
      vmed(1,jc)=vmed(1,jc)+dqc
      vmed(3,jc)=vmed(3,jc)+qcapc
      vmepo(2,jc)=vmepo(2,jc)+q2akc
      vmepo(1,jc)=vmepo(1,jc)+q1(ic,jc,kc)/rm(jc)
      vmepo(3,jc)=vmepo(3,jc)+q3(ic,jc,kc)
      enddo
      enddo
      do l=1,3
      vmed(l,jc)=vmed(l,jc)*avgn
      vmepo(l,jc)=vmepo(l,jc)*avgn
      enddo
      enddo
      pcost=0.
      do jc=1,n2m
      do kc=1,n3m
      do ic=1,n1m
      pcost=pcost+pr(ic,jc,kc)
      enddo
      enddo
      enddo
      pcost=pcost/float(n1m*n2m*n3m)
      vit(1)=0.
      vit(2)=0.
      vit(3)=0.
      vit(4)=0.
      vit(5)=0.
c
c   mean pressure and passive scalar profiles
c
      do jc=1,n2m                                                     
      jm=jmv(jc)                                                        
      jp=jc+1
      pmed(jc)=0.
      do kc=1,n3m 
      do ic=1,n1m                                                     
      pmed(jc)=pmed(jc)+pr(ic,jc,kc)
      vit(1)=q1(ic,jc,kc)/rm(jc)*volz(jc)+vit(1)
      vit(2)=(q2(ic,jp,kc)+q2(ic,jc,kc))/rm(jc)*volz(jc)+vit(2)
      vit(3)=q3(ic,jc,kc)*volz(jc)+vit(3)
      vit(4)=pr(ic,jc,kc)*volz(jc)+vit(4)
      enddo
      enddo
      pmed(jc)=pmed(jc)*avgn
      enddo
      vit(1)=vit(1)*volto
      vit(2)=vit(2)*volto
      vit(3)=vit(3)*volto
      vit(4)=vit(4)*volto
      vit(5)=vit(5)*volto
      do jc=1,n2m
      jp=jc+1
      do l=1,4
      pvc(l,jc)=0.
      enddo
      do l=1,3
      turstr(l,jc)=0.
      enddo
      do kc=1,n3m
      do ic=1,n1m
c
c    calculation velocities at  the cell centre
c
      if(jc.eq.1) then
      q2akc= (q2(ic,jp,kc) - q2(isym(ic),jp,kc))*0.5/rc(jp)
      dphc=(q2akc+q2(ic,jp,kc)/rc(jp))*.5
       else
      dphc=
     1  (    q2(ic,jc,kc)/rc(jc)+q2(ic,jp,kc)/rc(jp))*0.5
      end if
      dqc=
     1  (    q1(ic,jc,kc)+q1(ipv(ic),jc,kc) )*0.5/rm(jc)
      qcapc=(q3(ic,jc,kc)+q3(ic,jc,kpv(kc)) )*0.5
c
c   calculation fluctuating velocities
c
      q1p=dqc-vmed(1,jc)
      q2p=dphc-vmed(2,jc)
      q3p=qcapc-vmed(3,jc)
      pcp=pr(ic,jc,kc)-pmed(jc)
c   calculation normal and Reynolds stress
c
      turstr(1,jc)=turstr(1,jc)+q1p**2
      turstr(2,jc)=turstr(2,jc)+q2p**2
      turstr(3,jc)=turstr(3,jc)+q3p**2
      pvc(4,jc)=pvc(4,jc)+pcp*pcp
      enddo
      enddo
      do l=1,3
      turstr(l,jc)=sqrt( turstr(l,jc)*avgn )
      enddo
      pvc(4,jc)= sqrt(pvc(4,jc)*avgn)
      enddo
      return
      end
c
c                                                                       
c  ************************ subrout vorc  **********************  
c                                                                       
c     this subroutine calculates the vorticity components
c                                                                       
      subroutine vorc
      include 'param.f'
      avgn=1./(float(n1m*n3m))
c                                                                       
c  ***********  compute the azimuthal vorticity component               
c               at         i+1/2,j,k 

c                                                                       
c  inside the field
      do jc=2,n2m
      jm=jmv(jc)
      vompo(1,jc)=0.
            do ic=1,n1m
      im=imv(ic)
                  do kc=1,n3m
      km=kmv(kc)
      dq2x3=(q2(ic,jc,kc)-q2(ic,jc,km))*dx3/rc(jc)
      dq3x2=(q3(ic,jc,kc)-q3(ic,jm,kc))*dx2/g2rc(jc)
      rhs(ic,jc,kc)=(dq2x3-dq3x2)
      vompo(1,jc)=vompo(1,jc)+rhs(ic,jc,kc)
                  enddo
            enddo
      vompo(1,jc)=vompo(1,jc)*avgn
      enddo
      jc=1
      vompo(1,jc)=0.
      jp=jc+1
            do ic=1,n1m
                  do kc=1,n3m
      km=kmv(kc)
c  At  the axis  
      q2akc= (q2(ic,jp,kc) - q2(isym(ic),jp,kc))*0.5/rc(jp)
      q2akm= (q2(ic,jp,km) - q2(isym(ic),jp,km))*0.5/rc(jp)
      q3axi= (q3(ic,jc,kc) + q3(isym(ic),jc,kc))*0.5
      dq2x3=(q2akc-q2akm)*dx3
      dq3x2=(q3(ic,jc,kc)-q3axi)*dx2*2./g2rc(jc)
      rhs(ic,jc,kc)=dq2x3-dq3x2
      vompo(1,jc)=vompo(1,jc)+rhs(ic,jc,kc)
                  enddo
            enddo
      vompo(1,jc)=vompo(1,jc)*avgn
      jc=n2
      vompo(1,jc)=0.
      jm=jc-1
            do ic=1,n1m
                  do kc=1,n3m
c  At the wall  (no-slip)
      dq3x2=(-q3(ic,jm,kc))*dx2*2./g2rc(jc)
      rhs(ic,jc,kc)=-dq3x2
      vompo(1,jc)=vompo(1,jc)+rhs(ic,jc,kc)
                  enddo
            enddo
      vompo(1,jc)=vompo(1,jc)*avgn
c
c   azimuthal vorticity at the cell centre 
c
      do jc=2,n2m-1                                             
      vorv(1,jc)=0.
            do kc=1,n3m                                                   
      kp=kpv(kc)                                              
                  do ic=1,n1m
      dqc=(rhs(ic,jc,kc)+rhs(ic,jc+1,kc)+
     1     rhs(ic,jc,kp)+rhs(ic,jc+1,kp))*0.25
      vorv(1,jc)=vorv(1,jc)+dqc
      vo1c(ic,jc,kc)=dqc
                  enddo
            enddo
      vorv(1,jc)=vorv(1,jc)*avgn
      enddo
c
c    centerline azimuth. vort
c
      jc=1                                               
      vorv(1,jc)=0.
            do kc=1,n3m                                                   
      kp=kpv(kc)                                              
                  do ic=1,n1m
      dqc=(rhs(ic,jc,kc)+rhs(ic,jc+1,kc)+
     1     rhs(ic,jc,kp)+rhs(ic,jc+1,kp))*0.25
      vorv(1,jc)=vorv(1,jc)+dqc
      vo1c(ic,jc,kc)=dqc
                  enddo
            enddo
      vorv(1,jc)=vorv(1,jc)*avgn
      do jc=1,n2m                                               
      vorv(1,jc)=0.
            do kc=1,n3m                                                   
      kp=kpv(kc)                                              
                  do ic=1,n1m
      dqc=(rhs(ic,jc,kc)+rhs(ic,jc+1,kc)+
     1     rhs(ic,jc,kp)+rhs(ic,jc+1,kp))*0.25
      vorv(1,jc)=vorv(1,jc)+dqc
      vo1c(ic,jc,kc)=dqc
                  enddo
            enddo
      vorv(1,jc)=vorv(1,jc)*avgn
      enddo
c                                                                  
c  ***********  compute the radial  vorticity component            
c                           at  i,j+1/2,k
c                                                                  
      do jc=1,n2m
      vompo(2,jc)=0.
            do ic=1,n1m
      im=imv(ic)
                  do kc=1,n3m
      km=kmv(kc)
      dq3x1=(q3(ic,jc,kc)-q3(im,jc,kc))*dx1/rm(jc)
      dq1x3=(q1(ic,jc,kc)-q1(ic,jc,km))*dx3/rm(jc)
      rhs(ic,jc,kc)=(dq3x1-dq1x3)
      vompo(2,jc)=vompo(2,jc)+rhs(ic,jc,kc)
                  enddo
            enddo
      vompo(2,jc)=vompo(2,jc)*avgn
      enddo

c
c   vorticity at the cell centre inner field
c
      do jc=2,n2m-1
      vorv(2,jc)=0.
                  do kc=1,n3m                                                   
      kp=kpv(kc)
                  do ic=1,n1m
      ip=ipv(ic)                                                  
      dphc=(rhs(ic,jc,kc)+rhs(ip,jc,kc)+
     1      rhs(ic,jc,kp)+rhs(ip,jc,kp))*0.25
      vorv(2,jc)=vorv(2,jc)+dphc
      vo2c(ic,jc,kc)=dphc
                  enddo
                  enddo
      vorv(2,jc)=vorv(2,jc)*avgn
      enddo
c
c   vorticity at the cell centre wall        
c
      jc=n2m
      vorv(2,jc)=0.
            do kc=1,n3m                                                   
      kp=kpv(kc)
                  do ic=1,n1m
      ip=ipv(ic)                                                  
      dphc=(rhs(ic,jc,kc)+rhs(ip,jc,kc)+
     1      rhs(ic,jc,kp)+rhs(ip,jc,kp))*0.25
      vo2c(ic,jc,kc)=dphc
      vorv(2,jc)=vorv(2,jc)+dphc
                  enddo
            enddo
      vorv(2,jc)=vorv(2,jc)*avgn
c
c   vorticity at the cell centre center line
c
      jc=1
      vorv(2,jc)=0.
                  do kc=1,n3m                                                   
      kp=kpv(kc)
            do ic=1,n1m
      ip=ipv(ic)                                                  
      dphc=(rhs(ic,jc,kc)+rhs(ip,jc,kc)+
     1      rhs(ic,jc,kp)+rhs(ip,jc,kp))*0.25
      vo2c(ic,jc,kc)=dphc
      vorv(2,jc)=vorv(2,jc)+dphc
            enddo
                  enddo
      vorv(2,jc)=vorv(2,jc)*avgn
c                                                                  
c  ***********  compute the axial vorticity component        
c               at         i,j,k+1/2        
c
      do jc=2,n2m                                               
      vompo(3,jc)=0.
      jm=jc-1                                                  
            do kc=1,n3m                                                
                  do ic=1,n1m                                               
      im=imv(ic)                                                  
      dq1x2=(q1(ic,jc,kc)-q1(ic,jm,kc))*dx2/g2rc(jc)
      dq2x1=(q2(ic,jc,kc)-q2(im,jc,kc))*dx1/rc(jc)                 
      vorz=(dq1x2-dq2x1)/rc(jc)
      rhs(ic,jc,kc)=vorz
      vompo(3,jc)=vompo(3,jc)+rhs(ic,jc,kc)
                  enddo
            enddo
      vompo(3,jc)=vompo(3,jc)*avgn
      enddo
      jc=n2
      vompo(3,jc)=0.
      jm=n2m
            do kc=1,n3m                                                
                  do ic=1,n1m                                               
      dq1x2=-1./rc(jc)*q1(ic,jm,kc)*dx2*2./g2rc(jc)
      rhs(ic,jc,kc)=dq1x2
      vompo(3,jc)=vompo(3,jc)+rhs(ic,jc,kc)
                  enddo
            enddo
      vompo(3,jc)=vompo(3,jc)*avgn
      jc=1
      vompo(3,jc)=0.
            do kc=1,n3m
      vozcm=0.
                  do ic=1,n1m
      vozcm=vozcm+rhs(ic,2,kc)
                  enddo
      do ic=1,n1m
      rhs(ic,jc,kc)=vozcm/n1m
      vompo(3,jc)=vompo(3,jc)+rhs(ic,jc,kc)
      enddo
            enddo
      vompo(3,jc)=vompo(3,jc)*avgn

c
c   vorticity at the cell centre 
c
      do jc=2,n2m-1
      vorv(3,jc)=0.
            do kc=1,n3m                                                   
                  do ic=1,n1m
      ip=ipv(ic)                                                  
      qcapc=(rhs(ic,jc,kc)+rhs(ic,jc+1,kc)+
     1       rhs(ip,jc,kc)+rhs(ip,jc+1,kc))*0.25
      vo3c(ic,jc,kc)=qcapc
      vorv(3,jc)=vorv(3,jc)+qcapc
                  enddo
            enddo
      vorv(3,jc)=vorv(3,jc)*avgn
      enddo
c
c   vorticity at the cell centre center line
c
      jc=1                                               
      vorv(3,jc)=0.
            do kc=1,n3m                                                   
                  do ic=1,n1m
      ip=ipv(ic)                                                  
      qcapc=(rhs(ic,jc,kc)+rhs(ic,jc+1,kc)+
     1       rhs(ip,jc,kc)+rhs(ip,jc+1,kc))*0.25
      vorv(3,jc)=vorv(3,jc)+qcapc
      vo3c(ic,jc,kc)=qcapc
                  enddo
            enddo
      vorv(3,jc)=vorv(3,jc)*avgn
c
c   vorticity at the cell centre wall    
c
      jc=n2m                                               
      vorv(3,jc)=0.
            do kc=1,n3m                                                   
                  do ic=1,n1m
      ip=ipv(ic)                                                  
      qcapc=(rhs(ic,jc,kc)+rhs(ic,jc+1,kc)+
     1       rhs(ip,jc,kc)+rhs(ip,jc+1,kc))*0.25
      vo3c(ic,jc,kc)=qcapc
      vorv(3,jc)=vorv(3,jc)+qcapc
                  enddo
            enddo
      vorv(3,jc)=vorv(3,jc)*avgn

      do jc=n2m,1,-1
      jp=jc+1
      jm=jc-1
            do l=1,3
      vorstr(l,jc)=0.
            enddo
      do kc=1,n3m
      kp=kpv(kc)
      km=kmv(kc)
      do ic=1,n1m
      ip=ipv(ic)
      im=imv(ic)
      if(jc.ge.2.and.jc.le.n2m-1) then
c
c   azimuthal vorticity
c
      dq2x3c=(q2(ic,jc,kc)-q2(ic,jc,km))*dx3/rc(jc)
      dq3x2c=(q3(ic,jc,kc)-q3(ic,jm,kc))*dx2/g2rc(jc)
      dq2x3a=(q2(ic,jp,kc)-q2(ic,jp,km))*dx3/rc(jp)
      dq3x2a=(q3(ic,jp,kc)-q3(ic,jc,kc))*dx2/g2rc(jp)
      dq2x3d=(q2(ic,jc,kp)-q2(ic,jc,kc))*dx3/rc(jc)
      dq3x2d=(q3(ic,jc,kp)-q3(ic,jm,kp))*dx2/g2rc(jc)
      dq2x3b=(q2(ic,jp,kp)-q2(ic,jp,kc))*dx3/rc(jp)
      dq3x2b=(q3(ic,jp,kp)-q3(ic,jc,kp))*dx2/g2rc(jp)
      dqc=((dq2x3c-dq3x2c)+(dq2x3a-dq3x2a)
     1    +(dq2x3b-dq3x2b)+(dq2x3d-dq3x2d))*0.25
      q1p=dqc-vorv(1,jc)
c
c   radial vorticity
c
      dq3x1c=(q3(ic,jc,kc)-q3(im,jc,kc))*dx1/rm(jc)
      dq1x3c=(q1(ic,jc,kc)-q1(ic,jc,km))*dx3/rm(jc)
      dq3x1a=(q3(ip,jc,kc)-q3(ic,jc,kc))*dx1/rm(jc)
      dq1x3a=(q1(ip,jc,kc)-q1(ip,jc,km))*dx3/rm(jc)
      dq3x1b=(q3(ip,jc,kp)-q3(ic,jc,kp))*dx1/rm(jc)
      dq1x3b=(q1(ip,jc,kp)-q1(ip,jc,kc))*dx3/rm(jc)
      dq3x1d=(q3(ic,jc,kp)-q3(im,jc,kp))*dx1/rm(jc)
      dq1x3d=(q1(ic,jc,kp)-q1(ic,jc,kc))*dx3/rm(jc)
      dphc=((dq1x3c-dq3x1c)+(dq1x3a-dq3x1a)
     1     +(dq1x3b-dq3x1b)+(dq1x3d-dq3x1d))*0.25
      q2p=dphc-vorv(2,jc)
c
c   axial vorticity
c
      dq1x2c=(q1(ic,jc,kc)-q1(ic,jm,kc))*dx2/g2rc(jc)
      dq2x1c=(q2(ic,jc,kc)-q2(im,jc,kc))*dx1/rc(jc)
      dq1x2a=(q1(ic,jp,kc)-q1(ic,jc,kc))*dx2/g2rc(jp)
      dq2x1a=(q2(ic,jp,kc)-q2(im,jp,kc))*dx1/rc(jp)
      dq1x2d=(q1(ip,jc,kc)-q1(ip,jm,kc))*dx2/g2rc(jc)
      dq2x1d=(q2(ip,jc,kc)-q2(ic,jc,kc))*dx1/rc(jc)
      dq1x2b=(q1(ip,jp,kc)-q1(ip,jc,kc))*dx2/g2rc(jp)
      dq2x1b=(q2(ip,jp,kc)-q2(ic,jp,kc))*dx1/rc(jp)
      vorz=(dq1x2-dq2x1)/rc(jc)
      qcapc=((dq1x2c-dq2x1c)/rc(jc)+(dq1x2a-dq2x1a)/rc(jp)
     1      +(dq1x2b-dq2x1b)/rc(jp)+(dq1x2d-dq2x1d)/rc(jc))*0.2
      q3p=qcapc-vorv(3,jc)
                                  else
      if(jc.eq.1) then
c
c   fluctuating vorticities at the cell centre  centerline
c
      q1p=vowa(1,jc,kc)-vorv(1,jc)
      q2p=vowa(2,jc,kc)-vorv(2,jc)
      q3p=vowa(3,jc,kc)-vorv(3,jc)
                  endif
      if(jc.eq.n2m) then
c
c   fluctuating vorticities at the cell centre  wall
c
      q1p=vowa(1,jc,kc)-vorv(1,jc)
      q2p=vowa(2,jc,kc)-vorv(2,jc)
      q3p=vowa(3,jc,kc)-vorv(3,jc)
                    endif
                                  endif
      rhs(ic,jc,kc)=q3p
c
c   normal vortity correlation
c
      vorstr(1,jc)=vorstr(1,jc)+q1p**2
      vorstr(2,jc)=vorstr(2,jc)+q2p**2
      vorstr(3,jc)=vorstr(3,jc)+q3p**2
      enddo
      enddo
      do l=1,3
      vorstr(l,jc)=sqrt( vorstr(l,jc)*avgn )
      enddo
      enddo
      return                                                            
      end                                                               
************************************************************************
c                                                                       *
c     ********* subrout pricor ******************                       *
c                                                                       *
c************************************************************************
      subroutine pricor
      include 'param.f'
      dimension zzm(m3),xxm(m1,m2),yym(m1,m2),rh(2*m2)
      namfile='cordtz.dat'
      open(18,file=namfile,form='unformatted')
      n3pp=(n3-1)/n3p
      n2pp=(n2-1)/n2p
      n1pp=(n1-1)/n1p+1
      aaa=1.
      thetam(n1)=thetam(1)
      do k=1,n3m
      zzm(k)=(zz(k)+zz(k+1))*0.5
      enddo
      write(6,*) 'in prico tz' ,n3m,n1m
      write(18) n3m,n1m,1
      write(18)
     1            ((zzm(k),k=1,n3m),i=1,n1m),
     1            ((thetam(i),k=1,n3m),i=1,n1m),
     1            ((aaa,k=1,n3m),j=1,n1m)
      close(18)
      do j=1,n2m
      do i=1,n1m
      thetal=thetam(i)
      jp=j+1
      xxm(i,jp)=rm(j)*cos(thetal)
      yym(i,jp)=rm(j)*sin(thetal)
      enddo
      enddo
      do i=1,n1m
      xxm(i,1)=0.
      yym(i,1)=0.
      enddo
      do j=1,n2
      xxm(n1,j)=xxm(1,j)
      yym(n1,j)=yym(1,j)
      enddo
      namfile='cordxy.dat'
      open(18,file=namfile,form='unformatted')
      write(6,*) 'in prico xy' ,n1,n2m
      write(18) n1,n2,1
      write(18)
     1   ((xxm(i,j),i=1,n1),j=1,n2),
     1   ((yym(i,j),i=1,n1),j=1,n2),
     1   ((aaa,i=1,n1),j=1,n2)
      close(18)
      n2pr=2*n2m
      n1hp=n1m/2+1
      n2pr=2*n2m
      do j=1,n2pr
      if(j.le.n2m) then
      rh(j)=-rm(n2m+1-j)
                   else
      rh(j)=rm(j-n2m)
                   endif
      write(12,*)j,rh(j)
      enddo
      namfile='cordzr.dat'
      open(18,file=namfile,form='unformatted')
      write(18) n3m,n2pr,1
      write(18)
     1            ((zzm(k),k=1,n3m),j=1,n2pr),
     1            ((rh(j),k=1,n3m),j=1,n2pr),
     1            ((aaa,k=1,n3m),j=1,n2pr)
      close(18)
      if(i3dou.eq.1) then
      namfile='r3dco.dat'
      open(18,file=namfile,form='unformatted')
      write(18) n1pp,n2pp,n3pp
      write(18)
     1   (((xxm(i,j),i=1,n1,n1p),j=1,n2m,n2p),k=1,n3m,n3p),
     1   (((yym(i,j),i=1,n1,n1p),j=1,n2m,n2p),k=1,n3m,n3p),
     1   (((zz(k),i=1,n1,n1p),j=1,n2m,n2p),k=1,n3m,n3p)
      close(18)
                        endif
      return
      end
c************************************************************************
c                                                                       *
c  ****************************** subrout vmaxv **********************  *
c                                                                       *
c************************************************************************
      subroutine vmaxv(n1mv,n2mv,n3mv)
      include 'param.f'
c
c     find the maximum velocities in order to check convergence or
c     to derive stability conditions.
c
      vca=0.
c
      do 311 l=1,ndv
      vmax(l)=0.
      do k=1,n3mv
      do j=1,n2mv
      do i=1,n1mv
      if(l.eq.1) vca=q1(i,j,k)
      if(l.eq.2) vca=q2(i,j,k)
      if(l.eq.3) vca=q3(i,j,k)
      if(abs(vca).ge.vmax(l)) then
      vmax(l)=abs(vca)
                              endif
      enddo
      enddo
      enddo
      vmaxo(l)=0.
      do k=1,n3mv
      do j=2,n2mv
      do i=1,n1mv
      if(l.eq.2) vca=q2(i,j,k)/rc(j)
      if(abs(vca).ge.vmaxo(l)) then
      vmaxo(l)=abs(vca)
                              endif
      enddo
      enddo
      enddo
      do k=1,n3mv
      do j=1,n2mv
      do i=1,n1mv
      if(l.eq.1) vca=q1(i,j,k)/rm(j)
      if(l.eq.3) vca=q3(i,j,k)
      if(abs(vca).ge.vmaxo(l)) then
      vmaxo(l)=abs(vca)
                              endif
      enddo
      enddo
      enddo
  311 continue
      return
      end
c************************************************************************
c                                                                       *
c  ****************************** subrout outpf  ********************** *
c                                                                       *
c************************************************************************
      subroutine outpf(time,nav)
      include 'param.f'
      dimension q1rz(2*m2m,m3m),q2rz(2*m2m,m3m),q3rz(2*m2m,m3m)
      dimension vo1rz(2*m2m,m3m),vo2rz(2*m2m,m3m),vo3rz(2*m2m,m3m)
      dimension prrz(2*m2m,m3m)
      dimension q1tr(m1,m2),q2tr(m1,m2),q3tr(m1,m2)
      dimension vo1tr(m1,m2),vo2tr(m1,m2),vo3tr(m1,m2)
      dimension prtr(m1,m2)
      dimension q1tz(m1,m3),q2tz(m1,m3),q3tz(m1,m3)
      dimension vo1tz(m1,m3),vo2tz(m1,m3),vo3tz(m1,m3)
      dimension prtz(m1,m3),pprms(m2)
      dimension s33med(m2),s33rms(m2)
      dimension httz(m1,m3)
      dimension h1tz(m1,m3),h2tz(m1,m3),h3tz(m1,m3)
      dimension vc1tz(m1,m3),vc2tz(m1,m3),vc3tz(m1,m3)
      common/inom/inorm
      character*3 nkpse,njpse
      character*4 navps
      npq=1
c
c     form the name of the file
c
      nptz=0
      irep=re
      itime=nint(time)
      write(ipre,98)irep
      write(ipfi,82)itime
   98 format(i4.4)
   82 format(i4.4)
   83 format(i3.3)
      ki=1+njumk/2
c
c    r-theta sections
c
      do k=ki,n3m,njumk
      write(nkpse,83)k
      if(inorm.eq.1) then
      namfi3='versenor'//nkpse//'.dat'
                     else
      namfi3='verse'//nkpse//'.dat'
                     endif
      do i=1,n1m
      do j=1,n2m
      jp=j+1
      if(j.eq.1) then
      q2akc= (q2(i,jp,k) - q2(isym(i),jp,k))*0.5/rc(jp)
      q2c=(q2akc+q2(i,jp,k)/rc(jp))*.5
       else
      q2c=
     1  (    q2(i,j,k)/rc(j)+q2(i,jp,k)/rc(jp))*0.5
      end if
      q1c=
     1  (    q1(i,j,k)+q1(ipv(i),j,k) )*0.5/rm(j)
      q3c=(q3(i,j,k)+q3(i,j,kpv(k)) )*0.5 
      q1tr(i,jp)=q1c-vmed(1,j)
      q2tr(i,jp)=q2c-vmed(2,j)
      q3tr(i,jp)=q3c-vmed(3,j)
      prtr(i,jp)=pr(i,j,k)-pmed(j)
      vo1tr(i,jp)=vo1c(i,j,k)-vorv(1,j)
      vo2tr(i,jp)=vo2c(i,j,k)-vorv(2,j)
      vo3tr(i,jp)=vo3c(i,j,k)-vorv(3,j)
      if(inorm.eq.1) then
c
c   fluctuations normalised by rms value
c
      q1tr(i,jp)=q1tr(i,jp)/turstr(1,j)
      q2tr(i,jp)=q2tr(i,jp)/turstr(2,j)
      q3tr(i,jp)=q3tr(i,jp)/turstr(3,j)
      prtr(i,jp)=prtr(i,jp)/pvc(4,j)
      vo1tr(i,jp)=vo1tr(i,jp)/vorstr(1,j)
      vo2tr(i,jp)=vo2tr(i,jp)/vorstr(2,j)
      vo3tr(i,jp)=vo3tr(i,jp)/vorstr(3,j)
                     endif
      enddo
      enddo
      q1trcm=0.
      q2trcm=0.
      q3trcm=0.
      prtrcm=0.
      vo1trcm=0.
      vo2trcm=0.
      vo3trcm=0.
      do i=1,n1m
      q1trcm=q1tr(i,2)+q1trcm
      q2trcm=q2tr(i,2)+q2trcm
      q3trcm=q3tr(i,2)+q3trcm
      prtrcm=prtr(i,2)+prtrcm
      vo1trcm=vo1tr(i,2)+vo1trcm
      vo2trcm=vo2tr(i,2)+vo2trcm
      vo3trcm=vo3tr(i,2)+vo3trcm
      enddo
      do i=1,n1m
      q1tr(i,1)=q1trcm/n1m
      q2tr(i,1)=q2trcm/n1m
      q3tr(i,1)=q3trcm/n1m
      prtr(i,1)=prtrcm/n1m
      vo1tr(i,1)=vo1trcm/n1m
      vo2tr(i,1)=vo2trcm/n1m
      vo3tr(i,1)=vo3trcm/n1m
      enddo
      do j=1,n2
      q1tr(n1,j)=q1tr(1,j)
      q2tr(n1,j)=q2tr(1,j)
      q3tr(n1,j)=q3tr(1,j)
      prtr(n1,j)=prtr(1,j)
      vo1tr(n1,j)=vo1tr(1,j)
      vo2tr(n1,j)=vo2tr(1,j)
      vo3tr(n1,j)=vo3tr(1,j)
      enddo
      open(59,file=namfi3,form='unformatted')
      rewind 59
      write(59) n1,n2,1
      write(59) re,re,re,time
      write(59)
     1   ((q1tr(i,j),i=1,n1),j=1,n2),
     1   ((q2tr(i,j),i=1,n1),j=1,n2),
     1   ((q3tr(i,j),i=1,n1),j=1,n2),
     1   ((prtr(i,j),i=1,n1),j=1,n2),
     1   ((vo1tr(i,j),i=1,n1),j=1,n2),
     1   ((vo2tr(i,j),i=1,n1),j=1,n2),
     1   ((vo3tr(i,j),i=1,n1),j=1,n2)
      close(59)
        enddo
      ki=1+njumk/2
      do k=ki,n3m,njumk
c
c   here other quantities are written
c   e.g. velocity vorticity tensor components
c
      write(nkpse,83)k
      namfi3='vserms'//nkpse//'.dat'
      do i=1,n1m
      do j=1,n2m
      jp=j+1
      if(j.eq.1) then
      q2akc= (q2(i,jp,k) - q2(isym(i),jp,k))*0.5/rc(jp)
      q2c=(q2akc+q2(i,jp,k)/rc(jp))*.5
       else
      q2c=
     1  (    q2(i,j,k)/rc(j)+q2(i,jp,k)/rc(jp))*0.5
      end if
      q1c=
     1  (    q1(i,j,k)+q1(ipv(i),j,k) )*0.5/rm(j)
      q3c=(q3(i,j,k)+q3(i,j,kpv(k)) )*0.5 
      q1p=(q1c-vmed(1,j))
      q2p=(q2c-vmed(2,j))
      q3p=(q3c-vmed(3,j))
      vo1p=vo1c(i,j,k)-vorv(1,j)
      vo2p=vo2c(i,j,k)-vorv(2,j)
      vo3p=vo3c(i,j,k)-vorv(3,j)
      prp=(pr(i,j,k)-pmed(j)+(q1p**2+q2p**2+q3p**2)*0.5)
      q1tr(i,jp)=q1p*vo2p
      q2tr(i,jp)=q2p*vo1p
      q3tr(i,jp)=q2p*vo3p
      prtr(i,jp)=q3p*vo2p
      vo1tr(i,jp)=q1p*vo1p
      vo2tr(i,jp)=q2p*vo2p
      vo3tr(i,jp)=q3p*vo3p
      enddo
      enddo
      q1trcm=0.
      q2trcm=0.
      q3trcm=0.
      prtrcm=0.
      vo1trcm=0.
      vo2trcm=0.
      vo3trcm=0.
      do i=1,n1m
      q1trcm=q1tr(i,2)+q1trcm
      q2trcm=q2tr(i,2)+q2trcm
      q3trcm=q3tr(i,2)+q3trcm
      prtrcm=prtr(i,2)+prtrcm
      vo1trcm=vo1tr(i,2)+vo1trcm
      vo2trcm=vo2tr(i,2)+vo2trcm
      vo3trcm=vo3tr(i,2)+vo3trcm
      enddo
      do i=1,n1m
      q1tr(i,1)=q1trcm/n1m
      q2tr(i,1)=q2trcm/n1m
      q3tr(i,1)=q3trcm/n1m
      prtr(i,1)=prtrcm/n1m
      vo1tr(i,1)=vo1trcm/n1m
      vo2tr(i,1)=vo2trcm/n1m
      vo3tr(i,1)=vo3trcm/n1m
      enddo
      do j=1,n2m
      q1tr(n1,j)=q1tr(1,j)
      q2tr(n1,j)=q2tr(1,j)
      q3tr(n1,j)=q3tr(1,j)
      prtr(n1,j)=prtr(1,j)
      vo1tr(n1,j)=vo1tr(1,j)
      vo2tr(n1,j)=vo2tr(1,j)
      vo3tr(n1,j)=vo3tr(1,j)
      enddo
      open(59,file=namfi3,form='unformatted')
      rewind 59
      write(59) n1,n2,1
      write(59) re,re,re,time
      write(59)
     1   ((q1tr(i,j),i=1,n1),j=1,n2),
     1   ((q2tr(i,j),i=1,n1),j=1,n2),
     1   ((q3tr(i,j),i=1,n1),j=1,n2),
     1   ((prtr(i,j),i=1,n1),j=1,n2),
     1   ((vo1tr(i,j),i=1,n1),j=1,n2),
     1   ((vo2tr(i,j),i=1,n1),j=1,n2),
     1   ((vo3tr(i,j),i=1,n1),j=1,n2)
      close(59)
        enddo
      write(navps,82) nav
      namfi3='medva'//navps//'.out'
      open(55,file=namfi3,form='formatted')
      namfi3='rmsva'//navps//'.out'
      open(54,file=namfi3,form='formatted')
      n1pp=(n1-1)/n1p
      do j=n2m,1,-1
      yd=1.-rm(j)
      write(54,133)yd,(vmed(l,j),l=1,3),pmed(j)
     1               ,(vorv(l,j),l=1,3),s33med(j)
  133 format(3x,10(1x,e11.4))
      if(j.eq.jprq(npq)) then
      jp=j+1
      h1max=0.
      h2max=0.
      h3max=0.
      htmax=0.
      vc1max=0.
      vc2max=0.
      vc3max=0.
      v1max=0.
      v2max=0.
      v3max=0.
      o1max=0.
      o2max=0.
      o3max=0.
      write(njpse,83)j
c
c   visualization on planes theta - x3
c
      do k=1,n3m
      do i=1,n1m
      if(j.eq.1) then
      q2akc= (q2(i,jp,k) - q2(isym(i),jp,k))*0.5/rc(jp)
      q2c=(q2akc+q2(i,jp,k)/rc(jp))*.5
       else
      q2c=
     1  (    q2(i,j,k)/rc(j)+q2(i,jp,k)/rc(jp))*0.5
      end if
      q1c=
     1  (    q1(i,j,k)+q1(ipv(i),j,k) )*0.5/rm(j)
      q3c=(q3(i,j,k)+q3(i,j,kpv(k)) )*0.5 
      q1tz(i,k)=q1c-vmed(1,j)
      q2tz(i,k)=q2c-vmed(2,j)
      q3tz(i,k)=q3c-vmed(3,j)
      prtz(i,k)=pr(i,j,k)-pmed(j)
      vo1tz(i,k)=vo1c(i,j,k)-vorv(1,j)
      vo2tz(i,k)=vo2c(i,j,k)-vorv(2,j)
      vo3tz(i,k)=vo3c(i,j,k)-vorv(3,j)
      v1max=max(abs(q1tz(i,k)),v1max)
      v2max=max(abs(q2tz(i,k)),v2max)
      v3max=max(abs(q3tz(i,k)),v3max)
      o1max=max(abs(vo1tz(i,k)),o1max)
      o2max=max(abs(vo2tz(i,k)),o2max)
      o3max=max(abs(vo3tz(i,k)),o3max)
      h1tz(i,k)=q1tz(i,k)*vo1tz(i,k)
      h2tz(i,k)=q2tz(i,k)*vo2tz(i,k)
      h3tz(i,k)=q3tz(i,k)*vo3tz(i,k)
      vc1tz(i,k)=q2tz(i,k)*vo3tz(i,k)-q3tz(i,k)*vo2tz(i,k)
      vc2tz(i,k)=q3tz(i,k)*vo1tz(i,k)-q1tz(i,k)*vo3tz(i,k)
      vc3tz(i,k)=q1tz(i,k)*vo2tz(i,k)-q2tz(i,k)*vo1tz(i,k)
      httz(i,k)=h1tz(i,k)+h2tz(i,k)+h3tz(i,k)
      h1max=max(abs(h1tz(i,k)),h1max)
      h2max=max(abs(h2tz(i,k)),h2max)
      h3max=max(abs(h3tz(i,k)),h3max)
      htmax=max(abs(httz(i,k)),htmax)
      v2max=max(abs(q2tz(i,k)),v2max)
      v3max=max(abs(q3tz(i,k)),v3max)
      o1max=max(abs(vo1tz(i,k)),o1max)
      o2max=max(abs(vo2tz(i,k)),o2max)
      o3max=max(abs(vo3tz(i,k)),o3max)
      if(inorm.eq.1) then
      q1tz(i,k)=q1tz(i,k)/turstr(1,j)
      q2tz(i,k)=q2tz(i,k)/turstr(2,j)
      q3tz(i,k)=q3tz(i,k)/turstr(3,j)
      prtz(i,k)=prtz(i,k)/pvc(4,j)
      vo1tz(i,k)=vo1tz(i,k)/vorstr(1,j)
      vo2tz(i,k)=vo2tz(i,k)/vorstr(2,j)
      vo3tz(i,k)=vo3tz(i,k)/vorstr(3,j)
      v1max=max(abs(q1tz(i,k)),v1max)
      v2max=max(abs(q2tz(i,k)),v2max)
      v3max=max(abs(q3tz(i,k)),v3max)
      o1max=max(abs(vo1tz(i,k)),o1max)
      o2max=max(abs(vo2tz(i,k)),o2max)
      o3max=max(abs(vo3tz(i,k)),o3max)
                     endif
      enddo
      enddo
      write(6,139)j,v1max,v2max,v3max,o1max,o2max,o3max
  139 format(3x,i4,6e12.4)
      if(inorm.eq.0) then
      namfi3='horvo'//njpse//'.dat'
                     else
      namfi3='horvonor'//njpse//'.dat'
                     endif
      open(59,file=namfi3,form='unformatted')
      namfi3='horhvc'//njpse//'.dat'
      open(69,file=namfi3,form='unformatted')
      write(59) n3m,n1m,1
      write(59) re,re,re,time
      write(59)
     1   ((q1tz(i,k),k=1,n3m),i=1,n1m),
     1   ((q2tz(i,k),k=1,n3m),i=1,n1m),
     1   ((q3tz(i,k),k=1,n3m),i=1,n1m),
     1   ((prtz(i,k),k=1,n3m),i=1,n1m),
     1   ((vo1tz(i,k),k=1,n3m),i=1,n1m),
     1   ((vo2tz(i,k),k=1,n3m),i=1,n1m),
     1   ((vo3tz(i,k),k=1,n3m),i=1,n1m)
      close(59)
      write(69) n3m,n1m,1
      write(69) re,re,re,time
      write(69)
     1   ((h1tz(i,k),k=1,n3m),i=1,n1m),
     1   ((h2tz(i,k),k=1,n3m),i=1,n1m),
     1   ((h3tz(i,k),k=1,n3m),i=1,n1m),
     1   ((httz(i,k),k=1,n3m),i=1,n1m),
     1   ((vc1tz(i,k),k=1,n3m),i=1,n1m),
     1   ((vc2tz(i,k),k=1,n3m),i=1,n1m),
     1   ((vc3tz(i,k),k=1,n3m),i=1,n1m)
      close(69)
      npq=npq+1
                            endif
               enddo
      close(55)
      close(54)
      ioldf=1
      n2pr=2*n2m
      n1hp=n1m/2+1
c
c    visualizations on two orthogonal planes
c    crossing the centerline
c
      do ls=1,2
      if(ls.eq.1) then
      namfi3='radse1.dat'
      i1=1
      ih=n1hp
                  endif
      if(ls.eq.2) then
      namfi3='radse2.dat'
      i1=1+n1m/4
      ih=n1hp+n1m/4
                  endif
      open(59,file=namfi3,form='unformatted')
      do k=1,n3m
      do j=1,n2pr
      if(j.le.n2m) then
      jt=n2m-j+1
      jp=jt+1
      if(jt.eq.1) then
      q2akc= (q2(i1,jp,k) - q2(isym(i1),jp,k))*0.5/rc(jp)
      q2c=(q2akc+q2(i1,jp,k)/rc(jp))*.5
       else
      q2c=
     1  (    q2(i1,jt,k)/rc(jt)+q2(i1,jp,k)/rc(jp))*0.5
      end if
      q1c=
     1  (    q1(i1,jt,k)+q1(ipv(i1),jt,k) )*0.5/rm(jt)
      q3c=(q3(i1,jt,k)+q3(i1,jt,kpv(k)) )*0.5 
      q1rz(j,k)=q1c-vmed(1,jt)
      q2rz(j,k)=q2c-vmed(2,jt)
      q3rz(j,k)=q3c-vmed(3,jt)
      prrz(j,k)=pr(i1,jt,k)-pmed(jt)
      vo1rz(j,k)=vo1c(i1,jt,k)-vorv(1,jt)
      vo2rz(j,k)=vo2c(i1,jt,k)-vorv(2,jt)
      vo3rz(j,k)=vo3c(i1,jt,k)-vorv(3,jt)
                   else
      jt=j-n2m
      jp=jt+1
      if(jt.eq.1) then
      q2akc= (q2(ih,jp,k) - q2(isym(ih),jp,k))*0.5/rc(jp)
      q2c=(q2akc+q2(ih,jp,k)/rc(jp))*.5
       else
      q2c=
     1  (    q2(ih,jt,k)/rc(jt)+q2(ih,jp,k)/rc(jp))*0.5
      end if
      q1c=
     1  (    q1(ih,jt,k)+q1(ipv(ih),jt,k) )*0.5/rm(jt)
      q3c=(q3(ih,jt,k)+q3(ih,jt,kpv(k)) )*0.5 
      q1rz(j,k)=q1c-vmed(1,jt)
      q2rz(j,k)=q2c-vmed(2,jt)
      q3rz(j,k)=q3c-vmed(3,jt)
      prrz(j,k)=pr(ih,jt,k)-pmed(jt)
      vo1rz(j,k)=vo1c(ih,jt,k)-vorv(1,jt)
      vo2rz(j,k)=vo2c(ih,jt,k)-vorv(2,jt)
      vo3rz(j,k)=vo3c(ih,jt,k)-vorv(3,jt)
                   endif
      enddo
      enddo
      write(59) n3m,n2pr,1
      write(59) re,re,re,time
      write(59)
     1   ((q1rz(j,k),k=1,n3m),j=1,n2pr),
     1   ((q2rz(j,k),k=1,n3m),j=1,n2pr),
     1   ((q3rz(j,k),k=1,n3m),j=1,n2pr),
     1   ((prrz(j,k),k=1,n3m),j=1,n2pr),
     1   ((vo1rz(j,k),k=1,n3m),j=1,n2pr),
     1   ((vo2rz(j,k),k=1,n3m),j=1,n2pr),
     1   ((vo3rz(j,k),k=1,n3m),j=1,n2pr)
          close(59)
                 enddo
      return
      end
c***********************************************************************
c                                                                       *
c  ****************************** subrout indic **********************  *
c                                                                       *
c     in this subroutine the indices ip,im,jp,jm,kp,km are calculated.  *
c                                                                       *
c************************************************************************
      subroutine indic                                                  
      include 'param.f'
c                                                                       
c                                                                       
c   azimuthal periodic direction                                               
c                                                                       
      do 1 ic=1,n1m                                                     
      imv(ic)=ic-1                                                      
      if(ic.eq.1) imv(ic)=n1m                                           
      ipv(ic)=ic+1                                                      
      if(ic.eq.n1m) ipv(ic)=1                                           
    1 continue                                                          
c                                                                       
c   vertical periodic direction                                               
c                                                                       
      do 4 kc=1,n3m
      kmv(kc)=kc-1                                                      
      kpv(kc)=kc+1                                                     
      if(kc.eq.1) kmv(kc)=n3m                                           
      if(kc.eq.n3m) kpv(kc)=1                                           
    4 continue                                                          
                                                                        
c     direction normal to the radial boundary 
                                                                        
      do 3 jc=1,n2m                                                     
      jmv(jc)=jc-1                                                      
      jpv(jc)=jc+1                                                      
      if(jc.eq.1) jmv(jc)=jc                                            
      if(jc.eq.n2m) jpv(jc)=jc                                          
    3 continue                                                          
c                                                                       
c   indices for the axis of symmetry and the external wall                                                   
c                                                                       
      do 15 jc=1,n2m                                                    
      jpc(jc)=jpv(jc)-jc                                                
      jmc(jc)=jc-jmv(jc)                                                
      jup(jc)=1-jpc(jc)                                                 
      jum(jc)=1-jmc(jc)                                                 
   15 continue                                                          
      do i=1,n1m
      isym(i) = i + n1m/2
      if(isym(i).gt.n1m) isym(i) = isym(i) - n1m
      enddo
      return                                                            
      end                                                               
c                                                                       *
c  ****************************** subrout divgck  ***********************
c                                                                       *
c     this subroutine checks divg(q) to see the local residue.          *
c                                                                       *
c************************************************************************
      subroutine divgck(qmax,qtot)                             
      include 'param.f'
c                                                                       
c     This is just a check on the divergence of the free-divergent
c     velocity field. The calculation is stopped if QMAX > RESID
c                                                                       
      qtot=0.                                                           
      qmax=0.                                                           
      uvol=1./(dx1*dx2*dx3)
      do 11 kc=1,n3m                                                    
      kp=kpv(kc)                                                        
      do 11 jc=1,n2m                                                    
      jp=jc+1                                                           
      usrnu1=dx1/rm(jc)**2
      usrnu2=dx2/g2rm(jc)/rm(jc)
      do 11 ic=1,n1m                                                   
      ip=ipv(ic)                                                        
      dqca1= (q1(ip,jc,kc)-q1(ic,jc,kc))*usrnu1
      dqca2= (q2(ic,jp,kc)-q2(ic,jc,kc))*usrnu2
      dqca3= (q3(ic,jc,kp)-q3(ic,jc,kc))*dx3
      dqcap= dqca1+dqca2+dqca3
      qtot=qtot+dqcap*rm(jc)*g2rm(jc)/dx2/dx3*uvol
      qmax=amax1(abs(dqcap),qmax)                                       
   11 continue
c     write(62,*)' DIVGCK',imxq,jmxq,kmxq,qtot,qmax
      return                                                            
      end                                                               
c************************************************************************
c                                                                       *
c  ****************************** subrout meshes ********************** *
c                                                                       *
c************************************************************************
c
c     The calculation of the mesh is performed.
c     THe physical coordinate are evaluated in the routine CORDI
c
      subroutine meshes
      include 'param.f'
      pi=2.*asin(1.)                                                    
      if(irid.eq.1) then
      dx1=2.*pi/(float(n1m)*float(lamb))     
       else
      dx1=2.*pi/float(n1m)
      endif
      dx2=1./float(n2m)                                                 
      dx3=alx3/float(n3m)                                               
      write(6,100)dx1,dx2,dx3                           
      write(32,100)dx1,dx2,dx3                           
 100  format(3x,'mesh size: d_theta= ',e9.4,' d_r= ',e9.4,' dz= ',e9.4)
      write(6,*)'  '
      write(32,*) '  '
      dx1=1./dx1                                                        
      dx2=1./dx2                                                        
      dx3=1./dx3                                                        
      dx1q=dx1*dx1                                                      
      dx2q=dx2*dx2                                                      
      dx3q=dx3*dx3                                                      
      return                                                            
      end                                                               
c************************************************************************
c                                                                       *
c   ************** subroutine cordin                                    *
c                                                                       *
c************************************************************************
      subroutine cordin                                                 
c
c     Physical coordinates are assigned
c
      include 'param.f'
      dimension eta(2*m2)
      dimension xt1(2*m2),xt2(2*m2)
      common/npjet/n2t
c
      open(77,file='radjet.out')
      open(79,file='radstr.out')
      open(78,file='rg2.out')
      pi=2.*asin(1.)                                                    
      if (istr.lt.0) then
      do 111 j=1,n2
       x2=(j-1)/dx2
       eta(j)=x2
       rc(j)=eta(j)*rext
  111 continue
       endif
      if (istr.eq.0) then
      tstr2=tanh(strr)
      do 112 j=1,n2
       x2=(j-1)/dx2
       eta(j)=tanh(strr*x2)/tstr2
       rc(j)=eta(j)*rext
  112 continue
       endif
      if (istr.eq.1) then
      n2tm=n2t-1
      dx2t=n2tm
      if(n2t.ne.n2) then
      etdp=float(n2m)/float(n2tm)
                    endif
      tstr=tanh(strr*etdp)
      do 113 j=1,n2t
       x2=(j-1)/dx2t
      xt1(j)=rmed1/rext*tanh(strr*x2)/tstr
  113 continue
      do 114 j=1,n2t
       x2=(j-1)/dx2t
      xt2(j)=1./xt1(n2t)+(1.-1./xt1(n2t))
     1     *tanh(strb*(x2-1.))/tanh(strb*(etdp-1.))
       eta(j)= xt1(j)*xt2(j)  
       rc(j)=eta(j)*rext
      write(77,203) j,rc(j)
  203 format(3x,i4,3x,5e12.5)
  114 continue
      endif
      do 115 j=1,n2
       x2=(j-1)/dx2
       yd=1.-rc(j)
      write(79,201) x2,yd,rc(j)
  201 format(3x,5e12.5)
115   continue
      do 11 j=1,n2                                                      
      ragc(j)=rc(j)                                                        
   11 continue                                                          
      rc(1)=0.                                                          
      do 12 j=1,n2m                                                     
      ragm(j)=(ragc(j)+ragc(j+1))*0.5                                                        
      rm(j)=ragm(j)                                                          

c$$$$$$$$$$$$$Computation of geometry terms for non-uniform grids$$$$$$$$

      g2rm(j)=(rc(j+1)-rc(j))*dx2

c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

   12 continue                                                          

      do 122 j=2,n2m
c$$$$$$$$$$$$$Computation of geometry terms for non-uniform grids$$$$$$$$

      g2rc(j)=(rc(j+1)-rc(j-1))*dx2*0.5
c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
122   continue
      g2rc(1)=(rc(2)-rc(1))*dx2
      g2rc(n2)= (rc(n2)-rc(n2m))*dx2

      do jc=1,n2
      write(78,201) rc(jc),rm(jc),g2rc(jc),g2rm(jc)
      enddo
 
      do 13 i=1,n1                                                      
      thetac(i)=-(i-1)/dx1                                              
   13 continue                                                          
      do 14 i=1,n1m                                                     
      thetam(i)=-(i-1+0.5)/dx1                                          
   14 continue                                                          
      do 2 k=1,n3                                                       
      zz(k)=(k-1)/dx3                                                   
   2  continue                                                          
      close(79)
      close(78)
      return                                                            
      end                                                               
c************************************************************************
c                                                                       *
      subroutine openfi                                                 *
c                                                                       *
c************************************************************************
      include 'param.f'
      open(46,file='nfpipe')
      read(46,'(a)')filcnw
      read(46,'(a)')filcnr
      read(46,'(a)')filth
      read(46,'(a)')filvm
      read(46,'(a)')filpo
      read(46,'(a)')filen
      read(46,'(a)')filet
      read(46,'(a)')filer
      read(46,'(a)')filez
      read(46,'(a)')filed
      read(46,'(a)')filev
      open(32,file=filth)
      open(33,file=filvm)
      open(34,file=filpo)
      open(39,file=filen)
      open(40,file=filet)
      open(41,file=filer)
      open(42,file=filez)
      open(49,file=filed)
      open(50,file='piqm.out')
      open(59,file='piav.out')
      rewind 12
      rewind 33
      rewind 34
      rewind 32
      rewind 39
      rewind 40
      rewind 41
      rewind 42
      rewind 49
      rewind 48
      return
      end   
c************************************************************************
c                                                                       *
c  ****************************** subrout inirea ********************** *
c     read input flow fields                                            *
c                                                                       *
c************************************************************************
      subroutine inirea(ntil,time,ntt,ncount,nap)
      include 'param.f'
      common/avgin/avpscn(m2),vnew(m2)
      character*38 namdir,namdir1,namdir2
      common/ichtim/itimcf,itimcf1
      common/namdi/namdir,namdir1,namdir2
      character*67 namfil
      itime=nint(time)
      write(ipfi,82)itime
   82 format(i4.4)
      ls=index(namdir," ")
      ls1=index(namdir1," ")
      ls2=index(namdir2," ")
c     write(6,*)'     in inirea da ',lipdf
      namfil='field'//ipfi//'.dat'
c     write(6,*)'     legge da ',namfil
      open(13,file=namfil,form='unformatted')
      nfil=13                                                           
      read(nfil) n1l,n2l,n3l                                        
      read(nfil) epsil,lamb,re,timl 
      write(6,*)' legge da ',namfil,'     ntime=',ntil,
     1          '  n1l,n2l,n3l ',n1l,n2l,n3l
      read(nfil)  (((q1(i,j,k),i=1,n1l),j=1,n2l),k=1,n3l),           
     1            (((q2(i,j,k),i=1,n1l),j=1,n2l),k=1,n3l),        
     1            (((q3(i,j,k),i=1,n1l),j=1,n2l),k=1,n3l),
     1            (((pr(i,j,k),i=1,n1l),j=1,n2l),k=1,n3l)      
      read(nfil) ntii,ntt
      if(ncount.eq.0) then
      enavo=0.
      disstpo=0.
      enpsvo=0.
      dissto=0.
      cfo=0.
      do  l=1,3
      do  j=1,n2m
      vmeo(l,j)=0.
      voro(l,j)=0.
      vdtomo(l,j)=0.
      enddo
      enddo
      do  l=1,4
      do  j=1,n2m
      pvmo(l,j)=0.
      skeo(l,j)=0.
      flao(l,j)=0.
      enddo
      enddo
      do  l=1,6
      do  j=1,n2m
      tursto(l,j)=0.
      vorsto(l,j)=0.
      vcromo(l,j)=0.
      enddo
      enddo
      do  j=1,n2m
      pmeo(j)=0.
      dissjo(j)=0.
      enddo
               endif
      return                                                            
      end                                                               
c************************************************************************
c                                                                       *
c  ****************************** subrout initia ********************** *
c     initial zero conditions in the whole field.                       *
c                                                                       *
c************************************************************************
      subroutine initia
      include 'param.f'
      do 4 j=1,n2                                                       
      do 4 i=1,n1                                                     
      do 4 k=1,n3                                                       
      pr(i,j,k)=0.                                                      
      q1(i,j,k)=0.                                                      
      q2(i,j,k)=0.                                                      
      q3(i,j,k)=0.                                                      
    4 continue                                                          
      do  l=1,5
      do  j=1,n2m
      vtvo(l,j)=0.
      dvto(l,j)=0.
      enddo
      enddo
      return                                                            
      end                                                               
