c************************************************************************
c                                                                       *
c                                                                       *
c     this cod is made to make flow visualizations from fields         
c     generated by the code in the directory CODESCH11/TR3D
c     a large part of the routines here used are taken from
c     that code.
c     
c     The quantities to visualiza are  evaluated at the cell centre.
c
c     To visualize the flow the data file tr3dfs.d used for the 
c     simulation must be used where instead of tfin should be
c     inserted the value of timei the time at which the
c     visualization is desired
c
c     the file tr3dout.d give the radial and axial locations
c     where to make plane visualizations
c                                                                       *
c                                                                       *
c************************************************************************
      program main                                                      
      include 'param.f'
      common/timavg/timav
      common/timini/timei
      common/ichtim/itimcf,itimcf1
      common/nbal/nba,ibudg
      common/inom/inorm
      open(15,file='tr3dfs.d')
      open(5,file='tr3dout.d')
      read(15,301) dummy
      read(15,*) n1,n2,n3,nsst,nwrit,nread
      read(15,301) dummy
      read(15,*) n1p,n2p,n3p
      read(15,301) dummy
      read(15,*) ntst,nprint,npin,nprde
      read(15,301) dummy
      read(15,*) alx3p,istr3,str3,rmed31,etdp3,strb3
      read(15,301) dummy
      read(15,*) re,vper,dt,pran,pscwal,irid
      read(15,301) dummy
      read(15,*) inslws,inslwn,inslwr,lamb
      read(15,301) dummy
      read(15,*) cflc,icfl,tpin,tprin,timei,tchpr,tprich
      read(15,301) dummy
      read(15,*) ros
c$$$$$ parameters for non uniform grid (r distribution) $$$$$$$$$$$$$$$$$
      read(15,301) dummy
      read(15,*)strr,rext,rint,rmed1
      read(15,301) dummy
      read(15,*)istr,rmed,etdp,strb,n2t,n2v
c$$$$$$$parameters for tripol init. conditions $$$$$$$$$$$$$$$$$$$$$$$$$$$$$
      read(15,301) dummy
      read(15,*) amp,alpha,crad,amp3,itrip
      read(15,301) dummy
      read(15,*) nwa,nwa3,iran1,iran3,sigr,rap,rapsc
c$$$$$$$parameters for vortex ring
      read(15,301) dummy
      read(15,*) vmx,sig,yc2mo,yc3mo,iring
      read(15,301) dummy
      read(15,*) vper,epsil
301   format(a4)
  101 format(a38)
       read(5,301) dummy
       read(5,*) npk,(kprq(n),n=1,npk)
       write(6,*) 'kpr',(kprq(n),n=1,npk)
       read(5,301) dummy
       read(5,*) npq,(jprq(n),n=1,npq)
       write(6,*) 'njumk,  njumj ',njumk,njumj 
       do n=1,npq
       write(6,*)'n,jprq(n) ',n,jprq(n)
       enddo
c
c  when newvar=1 changes initial passive scalar mean profile
c                 
c
      pi=2.*asin(1.)                                                    
      alx3d=2.*pi*alx3p
      n1m=n1-1                                                          
      n2m=n2-1                                                          
      n3m=n3-1                                                          
      n3mh=n3m/2+1                                                      
c                                                                       
c                                                                       
      alx3=alx3d                                                        
c                                                                       
      call openfi
c                                                                       
c     assign coefficients for time marching schemes                     
c
      write(6,*)'*****************************************************'
      write(32,*)'*****************************************************'
      write(6,*)'*                                                    *'
      write(32,*) '*                                                  *'
      write(6,*)'*               Tripol         WITH ROTATION         *'
      write(32,*)'*              Tripol         WITH ROTATION         *'
      write(6,*)'*               Visualization                        *'
      write(32,*)'*              Visualization                        *'
      write(6,*)'*****************************************************'
      write(32,*)'*****************************************************'
      write(6,*)'  '
      write(32,*) '  '
      write(6,*)'  '
      write(32,*) '  '
      write(6,112)alx3d,r0                                              
      write(32,112)alx3d,r0                                             
  112 format(10x,'domain dimensions L_z =',f8.5,' L_r = ',f8.5)                
      write(6,*)'  '
      write(32,*) '  '
      write(6,*)'  '
      write(32,*) '  '
c                                                                       
      call solve                                                        
                                                                        
      stop                                                              
      end                                                               
c************************************************************************
c************************************************************************
c                                                                       *
c                                                                       *
c    code for visualization of three-dimensional incompressible flows     *
c    in polar cylindrical coordinate with two non-uniform coordinates   * 
c                                                                       * 
c                                                                       *
c************************************************************************
c************************************************************************
      subroutine solve                                                  
      include 'param.f'
      common/tima3/tiax3d
      common/timavg/timav
      common/timini/timei
      common/nbal/nba,ibudg
      common/iolfil/iovco,iohel
c
c                                                                       
c     grid definition, indices and mesh size calculation                          
c                                                                       
      call meshes
      call indic                                                        
      call cordin                                                       
c
c     print the grid
c
       ioldf=0
       iovco=0
       iohel=0
      call pricor
c
c     print some informations on the run
c
      write(6,*) '  '
      write(32,*) '  '
      write(6,754)n1,n2,n3                                              
      write(32,754)n1,n2,n3                                             
  754 format(10x,'number of grid points :'/                             
     1      5x,'n1=',i4,2x,'n2=',i4,2x,'n3=',i4/)                       
      write(6,*) '  '
      write(32,*) '  '
      write(6,756)n1p,n2p,n3p                                              
      write(32,756)n1p,n2p,n3p                                             
  756 format(10x,'plotting stride  :'/                             
     1      5x,'n1p=',i4,2x,'n2p=',i4,2x,'n3p=',i4/)                       
      write(6,*) '  '
      write(32,*) '  '
      write(6,755) re,ros
      write(32,755) re,ros
  755 format(3x,' Parameters of the flow: ',/,
     1 ' Reynolds number = ',e10.3,3x,' Rossby number = ',e10.3) 
      write(6,*) '  '
      write(32,*) '  '
      ren=re                                                            
      time=0.                                                           
      ntii=0                                                            
c
c  evaluation of metric quantities 
c
      call coetar
  159 format(1x,i4,2x,e10.4,3e10.3,3(1x,e10.4,1x,i3,1x,i3),e10.3)
c
c                                                                       
      ncount=0
      ntii=1
       time=timei
      ntime=ntii
c                                                                       
c   read  the field  to visualize
c                                                                       
      call tschem(ntime,time,ncount)
c                                                                       
c   write the output files to be visualized by TURB3D
c                                                                       
      call outpf(time,nav)
c                                                                       
c                                                                       
      return                                                            
      end                                                               
c                                                                       *
c ****************************** subrout coetar  ********************** *
c                                                                       *
c    this subroutine calculates the coefficients for the                *
c    integration in the radial direction with non-uniform coor. trasf.  *
c                                                               c                                                                       *
c************************************************************************
      subroutine coetar
      include 'param.f'
c
c  ***********  coefficients for q1   inner points
c
c
      do 151 jc=2,n2m-1
      jp=jc+1
      jm=jc-1
      a22=dx2q/g2rm(jc)/rm(jc)
      a22p= +a22*rc(jp)/g2rc(jp)
      a22m= +a22*rc(jc)/g2rc(jc)
      ap1j(jc)=a22p
      am1j(jc)=a22m
      ac1j(jc)=-(a22p+a22m)-1./rm(jc)**2
  151 continue
c
c    external bound. conditions
c
      jc=n2m
      jp=jc+1
      jm=jc-1
      a22=dx2q/g2rm(jc)/rm(jc)**2
      apjjc=a22*rc(jp)**3/rm(jc)/g2rc(jp)*2.
      acjjc=a22*rc(jc)**3/rm(jc)/g2rc(jc)
      amjjc=a22*rc(jc)**3/rm(jm)/g2rc(jc)
       if(inslwr.eq.1) then
        ap1j(jc)=-apjjc
       else
        ap1j(jc)=0.
       end if
      ac1j(jc)=-acjjc
      am1j(jc)=amjjc
c
c    internal boundary conditions
c
      jc=1
      jp=jc+1
      a22=dx2q/g2rm(jc)/rm(jc)
      a22p=a22*rc(jp)/g2rc(jp)
      ap1j(jc)=a22p
      ac1j(jc)=-a22p-1./rm(jc)**2
      am1j(jc)=0.
c
c  ***********  coefficients for q2
c
      am2j(1)=0.
      ap2j(1)=0.
      ac2j(1)=1.
      am2j(n2)=0.
      ap2j(n2)=0.
      ac2j(n2)=1.
      do 2 jc=2,n2m
      jm=jc-1
      jp=jc+1
      a22=rc(jc)*dx2q/g2rc(jc)
      a22p=1./(rm(jc)*g2rm(jc))
      a22m=1./(rm(jm)*g2rm(jm))
      ap2j(jc)=a22*a22p
      am2j(jc)=a22*a22m
      ac2j(jc)=-(a22*a22p+a22*a22m)
    2 continue
c
c  ***********  coefficients for q2  (explicit part)
c
      do jc=3,n2m
         jm=jc-1
         jp=jc+1
         ugmm = dx2q/g2rc(jc)
         a22p=rm(jc)/(rc(jp)*g2rm(jc))
         a22m=rm(jm)/(rc(jm)*g2rm(jm))
         a22= (rm(jc)/g2rm(jc) + rm(jm)/g2rm(jm))/rc(jc)
         ap2je(jc)=a22p*ugmm
         am2je(jc)=a22m*ugmm
         ac2je(jc)=-a22*ugmm  - 1./rc(jc)**2
      end do
c
c
c  ***********  coefficients for q3   inner points
c  *********** are equal to those for psc
c
      do 51 jc=2,n2m-1
      jp=jc+1
      jm=jc-1
      a22=dx2q/g2rm(jc)/rm(jc)
      a22p= +a22*rc(jp)/g2rc(jp)
      a22m= +a22*rc(jc)/g2rc(jc)
      ap3j(jc)=a22p
      am3j(jc)=a22m
      ac3j(jc)=-(a22p+a22m)
      apscj(jc)=a22p
      amscj(jc)=a22m
      acscj(jc)=-(a22p+a22m)
   51 continue
c    
c    external bound. conditions  q3
c    
      jc=n2m
      jp=jc+1
      jm=jc-1
       ugmm2=dx2q/g2rm(jc)/rm(jc)
       am3j(jc)=rc(jc)/g2rc(jc)*ugmm2
       ap3j(jc)=0.
      if(inslwr.eq.1) then
c                 no-slip wall
       ac3j(jc)= - (ugmm2*rc(jc)/g2rc(jc) +
     %              ugmm2*rc(jp)/g2rc(jp)*2. )
      else
c                 dq3/dr=0 has been assumed at the external boundary
       ac3j(jc)= - ugmm2*rc(jc)/g2rc(jc)
      endif
c    
c    external bound. conditions  psc
c    
      a22=dx2q/g2rm(jc)/rm(jc)
      a22m= +a22*rc(jc)/g2rc(jc)
      apscj(jc)=0.
      amscj(jc)=a22m
      acscj(jc)=-a22m
c    
c    internal boundary conditions   q3
c    
      jc=1
      jp=jc+1
      a22=dx2q/g2rm(jc)/rm(jc)
      a22p= +a22*rc(jp)/g2rc(jp)
      ap3j(jc)=a22p
      am3j(jc)=0.
      ac3j(jc)=-a22p
      apscj(jc)=a22p
      amscj(jc)=0.
      acscj(jc)=-a22p
      return
      end

c************************************************************************
c                                                                       *
c                                                                       
c  **************  subrout tschem                                       
c                                                                       
      subroutine tschem(ntime,time,ncount)
      include 'param.f'
      common/wavin/dlx1,dlx3,dkk1,dkk3
c
c    read the field
c
          call inirea(ntime,time,ntt,ncount,nap)           
c
c    evaluates the divergence of the field
c
          call divgck(dmax,dtot)                                 
          write(6,900)dmax,dtot                 ,ntime
          write(32,900)dmax,dtot                ,ntime
  900   format(3x,'maxima local and global divergence of the read field',
     1     /,' dmax = ',e11.4,' dtot = ',e11.4,'ntime=',i5)
c
c   evaluates the mean velocity averaged in theta
c
      call velc
c
c   evaluates the mean vorticity averaged in theta
c
      call vorc
      return                                                            
      end                                                               
c
c  ************************* subrout velc  **********************
c
c     this subroutine calculates the distribution of mean velocity
c     in r-z planes
c
      subroutine velc
      include 'param.f'
      common/prcost/pcost
      dimension turmax(6),turmin(6)
      dimension vpmax(6),vpmin(6)
      avgn=1./(float(n1m))
      vl123=1./(rc(n2)*n1m*n2m*n3m)
      volto=1./(pi*alx3d)
      pcost=0.
      do jc=1,n2m
      do kc=1,n3m
      do ic=1,n1m
      pcost=pcost+pr(ic,jc,kc)
      enddo
      enddo
      enddo
      pcost=pcost/float(n1m*n2m*n3m)
c
c  velocities at the center of the cell
c
      do jc=1,n2m
      jm=jmv(jc)
      jp=jc+1
      do kc=1,n3m
      kp=kc+1
      do ic=1,n1m
      if(jc.eq.1) then
      q2akc= (q2(ic,jp,kc) - q2(isym(ic),jp,kc))*0.5/rc(jp)
      dph(ic,jc,kc)=(q2akc+q2(ic,jp,kc)/rc(jp))*.5
       else
      dph(ic,jc,kc)=
     1  (    q2(ic,jc,kc)/rc(jc)+q2(ic,jp,kc)/rc(jp))*0.5
      end if
      dq(ic,jc,kc)=
     1  (    q1(ic,jc,kc)+q1(ipv(ic),jc,kc) )*0.5
      qcap(ic,jc,kc)=(q3(ic,jc,kc)+q3(ic,jc,kp) )*0.5
      enddo
      enddo
      enddo
c
c   mean velocity in the z-r planes
c
      do n=1,3
      vpmax(n)=-100.
      vpmin(n)=100.
      enddo
      do jc=1,n2m
      do kc=1,n3m
      vmep(2,kc,jc)=0.
      vmep(1,kc,jc)=0.
      vmep(3,kc,jc)=0.
      do ic=1,n1m
      vmep(1,kc,jc)=vmep(1,kc,jc)+q1(ic,jc,kc)
      vmep(3,kc,jc)=vmep(3,kc,jc)+q3(ic,jc,kc)
      vmep(2,kc,jc)=vmep(2,kc,jc)+q2(ic,jc,kc)
      enddo
      do n=1,3
      vmep(n,kc,jc)=vmep(n,kc,jc)*avgn
      vpmax(n)=max(vmep(n,kc,jc),vpmax(n))
      vpmin(n)=min(vmep(n,kc,jc),vpmin(n))
      enddo
      
      enddo
      vmep(3,n3,jc)=0.
      enddo
      do kc=1,n3m
      vmep(2,kc,n2)=0.
      enddo
      write(6,*)' vel max ',(vpmax(n),n=1,3) 
      write(6,*)' vel min ',(vpmin(n),n=1,3) 
c
c   calculation of streamfunction Psi=rc*psi_th
c 
      psimax=-100.
      psimin=100.
      vormax=-100.
      vormin=100.
      do kc=1,n3
      psimed(kc,1)=0.
      enddo
      do jc=1,n2
      psimed(1,jc)=0.
      enddo
      do jc=2,n2
      do kc=2,n3
      psimed(kc,jc)=0.5*(psimed(kc-1,jc)+psimed(kc,jc-1)
     1     +vmep(3,kc,jc-1)*rm(jc-1)*(rc(jc)-rc(jc-1))
     1     -vmep(2,kc-1,jc)*(zz(kc)-zz(kc-1)))
      psimax=max(psimed(kc,jc),psimax)
      psimin=min(psimed(kc,jc),psimin)
      enddo
      enddo
c
c   calculation of vorticity_th 
c 
      do kc=1,n3
      vormed(kc,1)=0.
      vormed(kc,n2)=vmep(3,kc,n2-1)/(rc(n2)-rm(n2-1))*inslwr
      enddo
      do jc=2,n2
      vormed(1,jc)=vmep(2,1,jc)/(zzm(1)-zz(1))/rc(jc)*inslws
      vormed(n3,jc)=vmep(2,n3-1,jc)/(zz(n3)-zzm(n3-1))/rc(jc)*inslwn
      enddo
      do jc=2,n2-1
      do kc=2,n3-1
      vormed(kc,jc)=-(vmep(3,kc,jc)-vmep(3,kc,jc-1))/(rm(jc)-rm(jc-1))
     1     +(vmep(2,kc,jc)-vmep(2,kc-1,jc)/(zzm(kc)-zzm(kc-1)))/rc(jc)
      enddo
      enddo
      do kc=1,n3
      do jc=1,n2
      vormax=max(vormed(kc,jc),vormax)
      vormin=min(vormed(kc,jc),vormin)
      enddo
      enddo
c
c   calculation of turbulent velocity contours
c 
      do n=1,6
      turmax(n)=0.
      turmin(n)=0.
      do kc=1,n3
      do jc=1,n2
      turstr(n,kc,jc)=0.
      enddo
      enddo
      enddo
      do jc=1,n2
      do ic=1,n1m
      kc=n3
      q1p=q1(ic,jc,kc-1)-vmep(1,kc-1,jc)
      q1c=q1(ic,jc,kc-1)
      q2p=q2(ic,jc,kc-1)-vmep(2,kc-1,jc)
      q2c=q2(ic,jc,kc-1)
      turstr(1,kc,jc)=turstr(1,kc,jc)+q1c
      turstr(2,kc,jc)=turstr(2,kc,jc)+q2c
      turstr(4,kc,jc)=turstr(4,kc,jc)+q1p**2
      turstr(5,kc,jc)=turstr(5,kc,jc)+q2p**2
      enddo
      enddo
      do kc=1,n3
      do ic=1,n1m
      jc=1
      q3p=q3(ic,jc,kc)-vmep(3,kc,jc)
      q3c=q3(ic,jc,kc)
      turstr(3,kc,jc)=turstr(3,kc,jc)+q3c
      turstr(6,kc,jc)=turstr(6,kc,jc)+q3p**2
      enddo
      enddo
      q3pma=0.
      q2pma=0.
      q1pma=0.
      do jc=2,n2m
      do kc=2,n3m
      do ic=1,n1m
      im=imv(ic)
      q3c=(vmep(3,kc,jc)+vmep(3,kc,jc-1))*0.5
      q2c=(vmep(2,kc,jc)+vmep(2,kc-1,jc))*0.5/rc(jc)
      q1c=
     1  (vmep(1,kc,jc)+vmep(1,kc-1,jc)
     1  +vmep(1,kc,jc-1)+vmep(1,kc-1,jc-1))/4.
      q3p=(q3(ic,jc,kc)+q3(ic,jc-1,kc))*0.5-q3c
      q2p=(q2(ic,jc,kc)+q2(ic,jc,kc-1))*0.5/rc(jc)-q2c
      q1p=(q1(ic,jc,kc)+q1(ic,jc,kc-1)+q1(ic,jc-1,kc)+q1(ic,jc-1,kc-1)
     1  +q1(im,jc,kc)+q1(im,jc,kc-1)+q1(im,jc-1,kc)+q1(im,jc-1,kc-1))/8.
     1 -q1c
      q3pma=max(abs(q3p),q3pma)
      q2pma=max(abs(q2p),q2pma)
      q1pma=max(abs(q1p),q1pma)
      turstr(3,kc,jc)=turstr(3,kc,jc)+q3c
      turstr(2,kc,jc)=turstr(2,kc,jc)+q2c
      turstr(1,kc,jc)=turstr(1,kc,jc)+q1c
      turstr(6,kc,jc)=turstr(6,kc,jc)+q3p*q3p
      turstr(4,kc,jc)=turstr(4,kc,jc)+q1p*q1p
      turstr(5,kc,jc)=turstr(5,kc,jc)+q2p*q2p
      enddo
      do n=1,6
      turstr(n,kc,jc)=turstr(n,kc,jc)*avgn
      turmax(n)=max(turstr(n,kc,jc),turmax(n))
      turmin(n)=min(turstr(n,kc,jc),turmin(n))
      enddo
      enddo
      enddo
      write(6,135)psimax,vormax,(turmax(n),n=1,6)
      write(6,136)psimin,vormin,(turmin(n),n=1,6)
  135 format('maxima ',3x,10e10.3)
  136 format('minima ',3x,10e10.3)
c
c   mean velocity at the cell center in the z-r planes
c
      do jc=1,n2m
      jm=jmv(jc)
      jp=jc+1
      do kc=1,n3m
      vmed(1,kc,jc)=0.
      vmed(2,kc,jc)=0.
      vmed(3,kc,jc)=0.
      pmed(kc,jc)=0.
      pscmed(kc,jc)=0.
      do ic=1,n1m
      pscmed(kc,jc)=pscmed(kc,jc)+psc(ic,jc,kc)
      pmed(kc,jc)=pmed(kc,jc)+pr(ic,jc,kc)-pcost
      vmed(2,kc,jc)=vmed(2,kc,jc)+dph(ic,jc,kc)
      vmed(1,kc,jc)=vmed(1,kc,jc)+dq(ic,jc,kc)
      vmed(3,kc,jc)=vmed(3,kc,jc)+qcap(ic,jc,kc)
      enddo
      vmed(1,kc,jc)=vmed(1,kc,jc)*avgn
      vmed(2,kc,jc)=vmed(2,kc,jc)*avgn
      vmed(3,kc,jc)=vmed(3,kc,jc)*avgn
      pmed(kc,jc)=pmed(kc,jc)*avgn
      pscmed(kc,jc)=pscmed(kc,jc)*avgn
      enddo
      enddo
      return
      end
c  ************************ subrout vorc  **********************
c
c     this subroutine calculates the  vorticity components
c
      subroutine vorc
      include 'param.f'
c
c
      avgn=1./(float(n3m))
c
c  ***********  compute the azimuthal vorticity component
c               at         i+1/2,j,k

c
c
      do kc=1,n3
      q3ax(kc)=0.
      do ic=1,n1m
      q3ax(kc)=q3ax(kc)+q3(ic,1,kc)
      enddo
      q3ax(kc)=q3ax(kc)/n1m
      enddo
c
c  inside the field
c
      do ic=1,n1m
      im=imv(ic)
      Do jc=2,n2m
      jm=jc-1
      kc=1
      if(inslws.eq.1) then
         dq2x3=q2(ic,jc,1)*dx3*2./rc(jc)/g3rc(1)
      else
         dq2x3=0.
      endif
      dq3x2=(q3(ic,jc,kc)-q3(ic,jm,kc))/(rm(jc)-rm(jm))
      rhs(ic,jc,kc)=(dq2x3-dq3x2)
      kc=n3
      if(inslwn.eq.1) then
         dq2x3=-q2(ic,jc,n3m)*dx3*2./rc(jc)/g3rc(n3)
      else
         dq2x3=0.
      endif
      dq3x2=(q3(ic,jc,kc)-q3(ic,jm,kc))/(rm(jc)-rm(jm))
      rhs(ic,jc,kc)=(dq2x3-dq3x2)
      do kc=2,n3m
      km=kmv(kc)
      dq2x3=(q2(ic,jc,kc)-q2(ic,jc,km))*dx3/rc(jc)/g3rc(kc)
      dq3x2=(q3(ic,jc,kc)-q3(ic,jm,kc))*dx2/g2rc(jc)
      rhs(ic,jc,kc)=(dq2x3-dq3x2)
      enddo
      enddo
      enddo
c
c  At  the wall
c
      jc=n2
      jm=jc-1
c
c  At the wall  (no-slip)
c
      do ic=1,n1m
      do kc=1,n3
      if(inslwr.eq.1) then
      dq3x2=(-q3(ic,jm,kc))*dx2*2./g2rc(jc)
                      else
      dq3x2=0.
                      endif
      rhs(ic,jc,kc)=-dq3x2
      enddo
      enddo
      do kc=1,n3
         do ic=1,n1m
            rhs(ic,1,kc) = (rhs(ic,2,kc)+rhs(isym(ic),2,kc))*0.5
         end do
      end do

c
c
c   azimuthal vorticity at the cell centre
c
      vomax(1)=-100.
      vomin(1)=+100.
      do jc=1,n2m
      do ic=1,n1m
      vorv(1,ic,jc)=0.
      do kc=1,n3m
      kp=kc+1
      dq(ic,jc,kc)=(rhs(ic,jc,kc)+rhs(ic,jc+1,kc)+
     1              rhs(ic,jc,kp)+rhs(ic,jc+1,kp))*0.25
      vomax(1)=max(vomax(1),dq(ic,jc,kc))
      vomin(1)=min(vomin(1),dq(ic,jc,kc))
      vorv(1,ic,jc)=vorv(1,ic,jc)+dq(ic,jc,kc)
      enddo
      vorv(1,ic,jc)=vorv(1,ic,jc)*avgn
      enddo
      enddo

c              
c  ***********  compute the radial  vorticity component
c                           at  i,j+1/2,k
c
      do jc=1,n2m
      do ic=1,n1m
      im=imv(ic)
      kc=1
      if(inslws.eq.1) then
         dq1x3=q1(ic,jc,1)*dx3*2.*rm(jc)/g3rc(kc)
      else
         dq1x3=0.
      endif
      dq3x1=(q3(ic,jc,kc)-q3(im,jc,kc))*dx1/rm(jc)
      rhs(ic,jc,kc)=(dq3x1-dq1x3)
      kc=n3
      if(inslwn.eq.1) then
         dq1x3=-q1(ic,jc,n3m)*dx3*2.*rm(jc)/g3rc(kc)
      else
         dq1x3=0.
      endif
      dq3x1=(q3(ic,jc,kc)-q3(im,jc,kc))*dx1/rm(jc)
      rhs(ic,jc,kc)=(dq3x1-dq1x3)
      do kc=2,n3m
      km=kmv(kc)
      dq3x1=(q3(ic,jc,kc)-q3(im,jc,kc))*dx1/rm(jc)
      dq1x3=(q1(ic,jc,kc)-q1(ic,jc,km))*dx3/g3rc(kc)
      rhs(ic,jc,kc)=(dq3x1-dq1x3)
      enddo
      enddo
      enddo

c
c   vorticity at the cell centre
c
      vomax(2)=-100.
      vomin(2)=+100.
      do jc=1,n2m
      do ic=1,n1m
      ip=ipv(ic)
      vorv(2,ic,jc)=0.
      do kc=1,n3m
      kp=kc+1   
      dph(ic,jc,kc)=(rhs(ic,jc,kc)+rhs(ip,jc,kc)+
     1               rhs(ic,jc,kp)+rhs(ip,jc,kp))*0.25
      vomax(2)=max(vomax(2),dph(ic,jc,kc))
      vomin(2)=min(vomin(2),dph(ic,jc,kc))
      vorv(2,ic,jc)=vorv(2,ic,jc)+dph(ic,jc,kc)
      enddo
      vorv(2,ic,jc)=vorv(2,ic,jc)*avgn
      enddo
      enddo
c
c  ***********  compute the axial vorticity component
c               at         i,j,k+1/2
c
      do kc=1,n3m
      do ic=1,n1m
      im=imv(ic)
      do jc=2,n2m
      jm=jc-1  
      dq1x2=(q1(ic,jc,kc)*rm(jc)-q1(ic,jm,kc)*rm(jm))/(rm(jc)-rm(jm))
      dq2x1=(q2(ic,jc,kc)-q2(im,jc,kc))*dx1/rc(jc)
      vorz=(dq1x2-dq2x1)/rc(jc)
      rhs(ic,jc,kc)=vorz
      enddo
      enddo
      enddo
      jc=n2
      jm=n2m
      if(inslwr.eq.1) then
      do kc=1,n3m
      do ic=1,n1m
      dq1x2=(-q1(ic,jm,kc)*rm(jm))/(rc(jc)-rm(jm))
      rhs(ic,jc,kc)=dq1x2/rc(jc)
      enddo
      enddo
                       else
      do kc=1,n3m
      do ic=1,n1m
      rhs(ic,jc,kc)=0.
      enddo
      enddo
                       endif
      do kc=1,n3m
      vozcm=0.
      do ic=1,n1m
      vozcm=vozcm+rhs(ic,2,kc)
      enddo
      do ic=1,n1m
      rhs(ic,1,kc)=vozcm/n1m
      enddo
      enddo
c
c   vorticity at the axis of symmetry
c
c
c   vorticity at the cell centre
c
      vomax(3)=-100.
      vomin(3)=+100.
      do jc=1,n2m
      do ic=1,n1m
      vorv(3,ic,jc)=0.
      do kc=1,n3m
      ip=ipv(ic)
      qcap(ic,jc,kc)=(rhs(ic,jc,kc)+rhs(ic,jc+1,kc)+
     1                rhs(ip,jc,kc)+rhs(ip,jc+1,kc))*0.25
      vomax(3)=max(vomax(3),qcap(ic,jc,kc))
      vomin(3)=min(vomin(3),qcap(ic,jc,kc))
      vorv(3,ic,jc)=vorv(3,ic,jc)+qcap(ic,jc,kc)
      enddo
      vorv(3,ic,jc)=vorv(3,ic,jc)*avgn
      enddo
      enddo
      return
      end
************************************************************************
c                                                                       *
c     ********* subrout pricor ******************                       *
c                                                                       *
c************************************************************************
      subroutine pricor
      include 'param.f'
      dimension xxm(m1,m2),yym(m1,m2),rh(2*m2)
      namfile='cordtz.dat'
      open(18,file=namfile,form='unformatted')
      n3pp=(n3-1)/n3p
      n2pp=(n2-1)/n2p
      n1pp=(n1-1)/n1p+1
      aaa=1.
      thetam(n1)=thetam(1)
      write(6,*) 'in prico tz' ,n3m,n1m
      write(18) n3m,n1m,1
      write(18)
     1            ((zzm(k),k=1,n3m),i=1,n1m),
     1            ((thetam(i),k=1,n3m),i=1,n1m),
     1            ((aaa,k=1,n3m),j=1,n1m)
      close(18)
      do j=1,n2m
      do i=1,n1m
      thetal=thetam(i)
      jp=j+1
      xxm(i,jp)=rm(j)*cos(thetal)
      yym(i,jp)=rm(j)*sin(thetal)
      enddo
      enddo
      do i=1,n1m
      xxm(i,1)=0.
      yym(i,1)=0.
      enddo
      do j=1,n2
      xxm(n1,j)=xxm(1,j)
      yym(n1,j)=yym(1,j)
      enddo
      namfile='cordxy.dat'
      open(18,file=namfile,form='unformatted')
      write(6,*) 'in prico xy' ,n1,n2m
      write(18) n1,n2,1
      write(18)
     1   ((xxm(i,j),i=1,n1),j=1,n2),
     1   ((yym(i,j),i=1,n1),j=1,n2),
     1   ((aaa,i=1,n1),j=1,n2)
      close(18)
      n2pr=2*n2m
      n1hp=n1m/2+1
      n2pr=2*n2m
      do j=1,n2pr
      if(j.le.n2m) then
      rh(j)=-rm(n2m+1-j)
                   else
      rh(j)=rm(j-n2m)
                   endif
      write(12,*)j,rh(j)
      enddo
      namfile='cordzr.dat'
      open(18,file=namfile,form='unformatted')
      write(18) n3m,n2pr,1
      write(18)
     1            ((zzm(k),k=1,n3m),j=1,n2pr),
     1            ((rh(j),k=1,n3m),j=1,n2pr),
     1            ((aaa,k=1,n3m),j=1,n2pr)
      close(18)
      namfile='corzrax.dat'
      open(18,file=namfile,form='unformatted')
      write(18) n3,n2,1
      write(18)
     1            ((zz(k),k=1,n3),j=1,n2),
     1            ((rc(j),k=1,n3),j=1,n2),
     1            ((aaa,k=1,n3),j=1,n2)
      close(18)
      if(i3dou.eq.1) then
      namfile='r3dco.dat'
      open(18,file=namfile,form='unformatted')
      write(18) n1pp,n2pp,n3pp
      write(18)
     1   (((xxm(i,j),i=1,n1,n1p),j=1,n2m,n2p),k=1,n3m,n3p),
     1   (((yym(i,j),i=1,n1,n1p),j=1,n2m,n2p),k=1,n3m,n3p),
     1   (((zz(k),i=1,n1,n1p),j=1,n2m,n2p),k=1,n3m,n3p)
      close(18)
                        endif
      return
      end
c************************************************************************
c                                                                       *
c  ****************************** subrout outpf  ********************** *
c                                                                       *
c************************************************************************
      subroutine outpf(time,nav)
      include 'param.f'
      dimension q1rz(2*m2m,m3m),q2rz(2*m2m,m3m),q3rz(2*m2m,m3m)
      dimension vo1rz(2*m2m,m3m),vo2rz(2*m2m,m3m),vo3rz(2*m2m,m3m)
      dimension prrz(2*m2m,m3m),pscrz(2*m2m,m3m)
      dimension q1tr(m1,m2),q2tr(m1,m2),q3tr(m1,m2)
      dimension vo1tr(m1,m2),vo2tr(m1,m2),vo3tr(m1,m2)
      dimension prtr(m1,m2),psctr(m1,m2)
      dimension q1tz(m1,m3),q2tz(m1,m3),q3tz(m1,m3)
      dimension vo1tz(m1,m3),vo2tz(m1,m3),vo3tz(m1,m3)
      dimension prtz(m1,m3),pprms(m2),psctz(m1,m3)
      character*3 nkpse,njpse
      character*4 navps
      npq=1
c
c     form the name of the file
c
      nptz=0
      irep=re
      itime=nint(time)
      write(ipre,98)irep
      write(ipfi,82)itime
   98 format(i4.4)
   82 format(i4.4)
   83 format(i3.3)
      deltaz=njumk*alx3/n3mol
      go to 313
      npk=1
c
c   write in theta-r planes helicity components and vorticity
c
      do k=n3m,1,-1
      if(k.eq.kprq(npk)) then
      write(nkpse,83)k
      kol=zzm(k)*n3mol/alx3
      namfi3='veseflu'//nkpse//'.dat'
      write(6,*)'write file  ',namfi3,kol
      do i=1,n1m
      do j=1,n2m
      jp=j+1
      if(j.eq.1) then
      q2akc= (q2(i,jp,k) - q2(isym(i),jp,k))*0.5/rc(jp)
      q2c=(q2akc+q2(i,jp,k)/rc(jp))*.5
       else
      q2c=
     1  (    q2(i,j,k)/rc(j)+q2(i,jp,k)/rc(jp))*0.5
      end if
      q1c=
     1  (    q1(i,j,k)+q1(ipv(i),j,k) )*0.5
      q3c=(q3(i,j,k)+q3(i,j,k+1) )*0.5 
      q1tr(i,jp)=q1c*dq(i,j,k)  
      q2tr(i,jp)=q2c*dph(i,j,k)  
      q3tr(i,jp)=q3c*qcap(i,j,k)  
      prtr(i,jp)=pr(i,j,k)
      psctr(i,jp)=psc(i,j,k)
      vo1tr(i,jp)=dq(i,j,k)
      vo2tr(i,jp)=dph(i,j,k)
      vo3tr(i,jp)=qcap(i,j,k)
      enddo
      enddo
      q1trcm=0.
      q2trcm=0.
      q3trcm=0.
      prtrcm=0.
      psctrcm=0.
      vo1trcm=0.
      vo2trcm=0.
      vo3trcm=0.
      do i=1,n1m
      q1trcm=q1tr(i,2)+q1trcm
      q2trcm=q2tr(i,2)+q2trcm
      q3trcm=q3tr(i,2)+q3trcm
      prtrcm=prtr(i,2)+prtrcm
      psctrcm=psctr(i,2)+psctrcm
      vo1trcm=vo1tr(i,2)+vo1trcm
      vo2trcm=vo2tr(i,2)+vo2trcm
      vo3trcm=vo3tr(i,2)+vo3trcm
      enddo
      do i=1,n1m
      q1tr(i,1)=q1trcm/n1m
      q2tr(i,1)=q2trcm/n1m
      q3tr(i,1)=q3trcm/n1m
      psctr(i,1)=psctrcm/n1m
      prtr(i,1)=prtrcm/n1m
      vo1tr(i,1)=vo1trcm/n1m
      vo2tr(i,1)=vo2trcm/n1m
      vo3tr(i,1)=vo3trcm/n1m
      enddo
      do j=1,n2
      q1tr(n1,j)=q1tr(1,j)
      q2tr(n1,j)=q2tr(1,j)
      q3tr(n1,j)=q3tr(1,j)
      prtr(n1,j)=prtr(1,j)
      psctr(n1,j)=psctr(1,j)
      vo1tr(n1,j)=vo1tr(1,j)
      vo2tr(n1,j)=vo2tr(1,j)
      vo3tr(n1,j)=vo3tr(1,j)
      enddo
      open(59,file=namfi3,form='unformatted')
      rewind 59
      write(59) n1,n2,1
      write(59) re,re,re,time
      write(59)
     1   ((q1tr(i,j),i=1,n1),j=1,n2),
     1   ((q2tr(i,j),i=1,n1),j=1,n2),
     1   ((q3tr(i,j),i=1,n1),j=1,n2),
     1   ((psctr(i,j),i=1,n1),j=1,n2),
     1   ((prtr(i,j),i=1,n1),j=1,n2),
     1   ((vo2tr(i,j),i=1,n1),j=1,n2),
     1   ((vo3tr(i,j),i=1,n1),j=1,n2)
      close(59)
      npk=npk+1
                      endif
        enddo
  313 continue
      ki=0
      zpr=alx3-deltaz*0.5
      npk=1
c
c   write in theta-r planes velocity and vorticity components 
c   the plane is  x-y  coordinates
c
      do k=n3m,1,-1
      if(k.eq.kprq(npk)) then
      write(nkpse,83)k
      namfi3='veseist'//nkpse//'.dat'
      do i=1,n1m
      do j=1,n2m
      jp=j+1
      if(j.eq.1) then
      q2akc= (q2(i,jp,k) - q2(isym(i),jp,k))*0.5/rc(jp)
      q2c=(q2akc+q2(i,jp,k)/rc(jp))*.5
       else
      q2c=
     1  (    q2(i,j,k)/rc(j)+q2(i,jp,k)/rc(jp))*0.5
      end if
      q1c=
     1  (    q1(i,j,k)+q1(ipv(i),j,k) )*0.5
      q3c=(q3(i,j,k)+q3(i,j,k+1) )*0.5 
      q1tr(i,jp)=q1c
      q2tr(i,jp)=q2c
      q3tr(i,jp)=q3c
      prtr(i,jp)=pr(i,j,k)
      psctr(i,jp)=psc(i,j,k)
      vo1tr(i,jp)=dq(i,j,k)
      vo2tr(i,jp)=dph(i,j,k)
      vo3tr(i,jp)=qcap(i,j,k)
      enddo
      enddo
      q1trcm=0.
      q2trcm=0.
      q3trcm=0.
      prtrcm=0.
      psctrcm=0.
      vo1trcm=0.
      vo2trcm=0.
      vo3trcm=0.
      do i=1,n1m
      q1trcm=q1tr(i,2)+q1trcm
      q2trcm=q2tr(i,2)+q2trcm
      q3trcm=q3tr(i,2)+q3trcm
      prtrcm=prtr(i,2)+prtrcm
      psctrcm=psctr(i,2)+psctrcm
      vo1trcm=vo1tr(i,2)+vo1trcm
      vo2trcm=vo2tr(i,2)+vo2trcm
      vo3trcm=vo3tr(i,2)+vo3trcm
      enddo
      do i=1,n1m
      q1tr(i,1)=q1trcm/n1m
      q2tr(i,1)=q2trcm/n1m
      q3tr(i,1)=q3trcm/n1m
      psctr(i,1)=psctrcm/n1m
      prtr(i,1)=prtrcm/n1m
      vo1tr(i,1)=vo1trcm/n1m
      vo2tr(i,1)=vo2trcm/n1m
      vo3tr(i,1)=vo3trcm/n1m
      enddo
      do j=1,n2
      q1tr(n1,j)=q1tr(1,j)
      q2tr(n1,j)=q2tr(1,j)
      q3tr(n1,j)=q3tr(1,j)
      prtr(n1,j)=prtr(1,j)
      psctr(n1,j)=psctr(1,j)
      vo1tr(n1,j)=vo1tr(1,j)
      vo2tr(n1,j)=vo2tr(1,j)
      vo3tr(n1,j)=vo3tr(1,j)
      enddo
      voma1=0.
      voma2=0.
      voma3=0.
      do i=1,n1m
      do j=1,n2
      voma1=max(abs(vo1tr(i,j)),voma1)
      voma2=max(abs(vo2tr(i,j)),voma2)
      voma3=max(abs(vo3tr(i,j)),voma3)
      enddo
      enddo
      write(6,*)'write file at ',k,voma1,voma2,voma3
      open(59,file=namfi3,form='unformatted')
      rewind 59
      write(59) n1,n2,1
      write(59) re,re,re,time
      write(59)
     1   ((q1tr(i,j),i=1,n1),j=1,n2),
     1   ((q2tr(i,j),i=1,n1),j=1,n2),
     1   ((q3tr(i,j),i=1,n1),j=1,n2),
     1   ((psctr(i,j),i=1,n1),j=1,n2),
     1   ((vo1tr(i,j),i=1,n1),j=1,n2),
     1   ((vo2tr(i,j),i=1,n1),j=1,n2),
     1   ((vo3tr(i,j),i=1,n1),j=1,n2)
      close(59)
      npk=npk+1
              endif
        enddo
      npq=1
      n1pp=(n1-1)/n1p
c
c    visualizations in theta-z planes
c    of velocity and vorticity components
c
      do j=n2m,1,-1
      if(j.eq.jprq(npq)) then
      jp=j+1
      vc1max=0.
      vc2max=0.
      vc3max=0.
      v1max=0.
      v2max=0.
      v3max=0.
      o1max=0.
      o2max=0.
      o3max=0.
      write(njpse,83)j
      do k=1,n3m
      do i=1,n1m
      if(j.eq.1) then
      q2akc= (q2(i,jp,k) - q2(isym(i),jp,k))*0.5/rc(jp)
      q2c=(q2akc+q2(i,jp,k)/rc(jp))*.5
       else
      q2c=
     1  (    q2(i,j,k)/rc(j)+q2(i,jp,k)/rc(jp))*0.5
      end if
      q1c=
     1  (    q1(i,j,k)+q1(ipv(i),j,k) )*0.5
      q3c=(q3(i,j,k)+q3(i,j,k+1) )*0.5 
      q1tz(i,k)=q1c
      q2tz(i,k)=q2c
      q3tz(i,k)=q3c
      prtz(i,k)=pr(i,j,k)
      psctz(i,k)=psc(i,j,k)
      vo1tz(i,k)=dq(i,j,k)
      vo2tz(i,k)=dph(i,j,k)
      vo3tz(i,k)=qcap(i,j,k)
      enddo
      enddo
      namfi3='horist'//njpse//'.dat'
      open(59,file=namfi3,form='unformatted')
      write(6,*) ' scrive ',namfi3,'  npq=',npq,j
      write(59) n3m,n1m,1
      write(59) re,re,re,time
      write(59)
     1   ((q1tz(i,k),k=1,n3m),i=1,n1m),
     1   ((q2tz(i,k),k=1,n3m),i=1,n1m),
     1   ((q3tz(i,k),k=1,n3m),i=1,n1m),
     1   ((psctz(i,k),k=1,n3m),i=1,n1m),
     1   ((vo1tz(i,k),k=1,n3m),i=1,n1m),
     1   ((vo2tz(i,k),k=1,n3m),i=1,n1m),
     1   ((vo3tz(i,k),k=1,n3m),i=1,n1m)
      close(59)
      npq=npq+1
                            endif
               enddo
      close(55)
      close(54)
c
c   visualizations in two r-z planes passing trhough the axis
c
      ioldf=1
      n2pr=2*n2m
      n1hp=n1m/2+1
      do ls=1,2
      if(ls.eq.1) then
      namfi3='radse1.dat'
      i1=1
      ih=n1hp
                  endif
      if(ls.eq.2) then
      namfi3='radse2.dat'
      i1=1+n1m/4
      ih=n1hp+n1m/4
                  endif
      open(59,file=namfi3,form='unformatted')
      do k=1,n3m
      do j=1,n2pr
      if(j.le.n2m) then
      jt=n2m-j+1
      jp=jt+1
      if(jt.eq.1) then
      q2akc= (q2(i1,jp,k) - q2(isym(i1),jp,k))*0.5/rc(jp)
      q2c=(q2akc+q2(i1,jp,k)/rc(jp))*.5
       else
      q2c=
     1  (    q2(i1,jt,k)/rc(jt)+q2(i1,jp,k)/rc(jp))*0.5
      end if
      q1c=
     1  (    q1(i1,jt,k)+q1(ipv(i1),jt,k) )*0.5
      q3c=(q3(i1,jt,k)+q3(i1,jt,k+1) )*0.5 
      q1rz(j,k)=q1c
      q2rz(j,k)=q2c
      q3rz(j,k)=q3c
      prrz(j,k)=pr(i1,jt,k)
      pscrz(j,k)=psc(i1,jt,k)
      vo1rz(j,k)=dq(i1,jt,k)
      vo2rz(j,k)=dph(i1,jt,k)
      vo3rz(j,k)=qcap(i1,jt,k)
                   else
      jt=j-n2m
      jp=jt+1
      if(jt.eq.1) then
      q2akc= (q2(ih,jp,k) - q2(isym(ih),jp,k))*0.5/rc(jp)
      q2c=(q2akc+q2(ih,jp,k)/rc(jp))*.5
       else
      q2c=
     1  (    q2(ih,jt,k)/rc(jt)+q2(ih,jp,k)/rc(jp))*0.5
      end if
      q1c=
     1  (    q1(ih,jt,k)+q1(ipv(ih),jt,k) )*0.5
      q3c=(q3(ih,jt,k)+q3(ih,jt,k+1) )*0.5 
      q1rz(j,k)=q1c
      q2rz(j,k)=q2c
      q3rz(j,k)=q3c
      prrz(j,k)=pr(ih,jt,k)
      pscrz(j,k)=psc(ih,jt,k)
      vo1rz(j,k)=dq(ih,jt,k)
      vo2rz(j,k)=dph(ih,jt,k)
      vo3rz(j,k)=qcap(ih,jt,k)
                   endif
      enddo
      enddo
      write(59) n3m,n2pr,1
      write(59) re,re,re,time
      write(59)
     1   ((q1rz(j,k),k=1,n3m),j=1,n2pr),
     1   ((q2rz(j,k),k=1,n3m),j=1,n2pr),
     1   ((q3rz(j,k),k=1,n3m),j=1,n2pr),
     1   ((pscrz(j,k),k=1,n3m),j=1,n2pr),
     1   ((vo1rz(j,k),k=1,n3m),j=1,n2pr),
     1   ((vo2rz(j,k),k=1,n3m),j=1,n2pr),
     1   ((vo3rz(j,k),k=1,n3m),j=1,n2pr)
          close(59)
                 enddo
      namfi3='axisym.dat'
      open(59,file=namfi3,form='unformatted')
      write(59) n3,n2,1
      write(59) re,re,re,time
      write(59)
     1   ((turstr(1,k,j),k=1,n3),j=1,n2),
     1   ((turstr(2,k,j),k=1,n3),j=1,n2),
     1   ((turstr(3,k,j),k=1,n3),j=1,n2),
     1   ((psimed(k,j),k=1,n3),j=1,n2),
     1   ((vormed(k,j),k=1,n3),j=1,n2),
     1   ((turstr(4,k,j),k=1,n3),j=1,n2),
     1   ((turstr(5,k,j),k=1,n3),j=1,n2)
          close(59)
      return
      end
c***********************************************************************
c                                                                       *
c  ****************************** subrout indic **********************  *
c                                                                       *
c     in this subroutine the indices ip,im,jp,jm,kp,km are calculated.  *
c                                                                       *
c************************************************************************
      subroutine indic                                                  
      include 'param.f'
c                                                                       
c                                                                       
c   azimuthal periodic direction                                               
c                                                                       
      do ic=1,n1m                                                     
      imv(ic)=ic-1                                                      
      if(ic.eq.1) imv(ic)=n1m                                           
      ipv(ic)=ic+1                                                      
      if(ic.eq.n1m) ipv(ic)=1                                           
      enddo
c                                                                       
c   vertical periodic direction                                               
c                                                                       
      do kc=1,n3m
      kmv(kc)=kc-1                                                      
      kpv(kc)=kc+1                                                     
      if(kc.eq.1) kmv(kc)=kc                                           
      if(kc.eq.n3m) kpv(kc)=kc                                         
      enddo
                                                                        
c     direction normal to the radial boundary 
                                                                        
      do jc=1,n2m                                                     
      jmv(jc)=jc-1                                                      
      jpv(jc)=jc+1                                                      
      if(jc.eq.1) jmv(jc)=jc                                            
      if(jc.eq.n2m) jpv(jc)=jc                                          
      enddo
c                                                                       
c   indices for the axis of symmetry and the external wall                                                   
c                                                                       
      do i=1,n1m
      isym(i) = i + n1m/2
      if(isym(i).gt.n1m) isym(i) = isym(i) - n1m
      enddo
      return                                                            
      end                                                               
c                                                                       *
c  ****************************** subrout divgck  ***********************
c                                                                       *
c     this subroutine checks divg(q) to see the local residue.          *
c                                                                       *
c************************************************************************
      subroutine divgck(qmax,qtot)                             
      include 'param.f'
c                                                                       
c     This is just a check on the divergence of the free-divergent
c     velocity field. The calculation is stopped if QMAX > RESID
c                                                                       
      qtot=0.                                                           
      qmax=0.                                                           
      uvol=1./(dx1*dx2*dx3)
      do 11 kc=1,n3m                                                    
      kp=kc+1                                           
      do 11 jc=1,n2m                                                    
      jp=jc+1                                                           
      usrnu1=dx1/rm(jc)
      usrnu2=dx2/g2rm(jc)/rm(jc)
      do 11 ic=1,n1m                                                   
      ip=ipv(ic)                                                        
      dqca1= (q1(ip,jc,kc)-q1(ic,jc,kc))*usrnu1
      dqca2= (q2(ic,jp,kc)-q2(ic,jc,kc))*usrnu2
      dqca3= (q3(ic,jc,kp)-q3(ic,jc,kc))*dx3/g3rm(kc)
      dqcap= dqca1+dqca2+dqca3
      qtot=qtot+dqcap*rm(jc)*g2rm(jc)*g3rm(kc)
      qmax=amax1(abs(dqcap),qmax)                                       
   11 continue
c     write(62,*)' DIVGCK',imxq,jmxq,kmxq,qtot,qmax
      return                                                            
      end                                                               
c************************************************************************
c                                                                       *
c  ****************************** subrout meshes ********************** *
c                                                                       *
c************************************************************************
c
c     The calculation of the mesh is performed.
c     THe physical coordinate are evaluated in the routine CORDI
c
      subroutine meshes
      include 'param.f'
      pi=2.*asin(1.)                                                    
        if(irid.eq.0) then
      dx1=2.*pi/float(n1m)
                      else
      dx1=2.*pi/(float(n1m)*float(lamb))
                      endif
      dx2=1./float(n2m)                                                 
      dx3=1./float(n3m)                                               
      write(6,100)dx1,dx2,dx3                           
      write(32,100)dx1,dx2,dx3                           
 100  format(3x,'mesh size: d_theta= ',e9.4,' d_r= ',e9.4,' dz= ',e9.4)
      write(6,*)'  '
      write(32,*) '  '
      dx1=1./dx1                                                        
      dx2=1./dx2                                                        
      dx3=1./dx3                                                        
      dx1q=dx1*dx1                                                      
      dx2q=dx2*dx2                                                      
      dx3q=dx3*dx3                                                      
      return                                                            
      end                                                               
c************************************************************************
c                                                                       *
c   ************** subroutine cordin                                    *
c                                                                       *
c************************************************************************
      subroutine cordin                                                 
c
c     Physical coordinates are assigned
c     non-uniform grids in r and in z
c
      include 'param.f'
      dimension etaz(m3)
      dimension eta(2*m2)
      dimension xt1(2*m2),xt2(2*m2)
      dimension xt31(m3),xt32(m3)
c
      open(79,file='radstr.out')
      open(78,file='axistr.out')
      pi=2.*asin(1.)                                                    
      if (istr.lt.0) then
      do 111 j=1,n2
       x2=(j-1)/dx2
       eta(j)=x2
       rc(j)=eta(j)*rext
  111 continue
       endif
      if (istr.eq.0) then
      tstr2=tanh(strr)
      do 112 j=1,n2
       x2=(j-1)/dx2
       eta(j)=tanh(strr*x2)/tstr2
       rc(j)=eta(j)*rext
  112 continue
                     endif
      if (istr.eq.1) then
      n2tm=n2t-1
      n2vm=n2v-1
      dx2t=n2tm
      if(n2t.ne.n2v) then
      etdp=float(n2vm)/float(n2tm)
                    endif
      tstr=tanh(strr*etdp)
      do 113 j=1,n2t
       x2=(j-1)/dx2t
      xt1(j)=rmed1/rext*tanh(strr*x2)/tstr
  113 continue
      do 114 j=1,n2t
       x2=(j-1)/dx2t
      xt2(j)=1./xt1(n2t)+(1.-1./xt1(n2t))
     1     *tanh(strb*(x2-1.))/tanh(strb*(etdp-1.))
       eta(j)= xt1(j)*xt2(j)  
       rc(j)=eta(j)*rext
  114 continue
                      endif
      if (istr.eq.2) then
      dx2t=float(n2m)
      tstr=tanh(strr*etdp)
      do j=1,n2
       x2=(j-1)/dx2t
      xt1(j)=rmed1/rext*tanh(strr*x2)/tstr
      enddo
      do j=1,n2
       x2=(j-1)/dx2t
      xt2(j)=1./xt1(n2)+(1.-1./xt1(n2))
     1     *tanh(strb*(x2-1.))/tanh(strb*(etdp-1.))
       eta(j)= xt1(j)*xt2(j)
       rc(j)=eta(j)*rext
      enddo
                      endif
      do 115 j=1,n2
       x2=(j-1)/dx2
       yd=1.-rc(j)
      write(79,201) x2,rc(j)
  201 format(3x,5e12.5)
115   continue
      do 11 j=1,n2                                                      
      ragc(j)=rc(j)                                                        
   11 continue                                                          
      rc(1)=0.                                                          
c$$$$$$$$$$$$$Computation of geometry terms for non-uniform grids$$$$$$$$
      do 12 j=1,n2m                                                     
      ragm(j)=(ragc(j)+ragc(j+1))*0.5 
      rm(j)=ragm(j)                                                          
      g2rm(j)=(rc(j+1)-rc(j))*dx2
   12 continue                                                          
      do 122 j=2,n2m
      g2rc(j)=(rc(j+1)-rc(j-1))*dx2*0.5
122   continue
      g2rc(1)=(rc(2)-rc(1))*dx2
      g2rc(n2)= (rc(n2)-rc(n2m))*dx2
c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
c     do jc=1,n2
c     write(78,201) rc(jc),rm(jc),g2rc(jc),g2rm(jc)
c     enddo
      do 13 i=1,n1                                                      
      thetac(i)=-(i-1)/dx1                                              
   13 continue                                                          
      do 14 i=1,n1m                                                     
      thetam(i)=-(i-1+0.5)/dx1                                          
   14 continue                                                          
      if(istr3.eq.0) then
      tstr3=tanh(str3)
      do k=1,n3
      x3=float(k-1)/float(n3m)
      etaz(k)=alx3*(1.+tanh(str3*(x3-1.0))/tstr3)
      zz(k)=etaz(k)                              
      write(78,201) x3,zz(k) 
      enddo
                     endif
      if(istr3.eq.2) then
      tstr3=tanh(str3*0.5)
      do k=1,n3
      x3=float(k-1)/float(n3m)
      etaz(k)=alx3*0.5*(1.+tanh(str3*(x3-0.5))/tstr3)
      zz(k)=etaz(k)                              
      write(78,201) x3,zz(k) 
      enddo
                     endif
      if (istr3.lt.0) then
      do k=1,n3
      x3=float(k-1)/float(n3m)
      etaz(k)=alx3*x3
      zz(k)=etaz(k)
      write(78,201) k,x3,zz(k)
      enddo
                      endif
      if (istr3.eq.1) then
      dx3t=n3m
      tstr3=tanh(str3*etdp3)
      do k=1,n3
       x3=float(k-1)/dx3t
      xt31(k)=rmed31/alx3*tanh(str3*x3)/tstr3
      end do
      do k=1,n3
       x3=(k-1)/dx3t
      xt32(k)=1./xt31(n3)+(1.-1./xt31(n3))
     1     *tanh(strb3*(x3-1.))/tanh(strb3*(etdp3-1.))
      etaz(k)= xt31(k)*xt32(k)
       zz(k)=etaz(k)*alx3
      write(78,201) k,x3,zz(k)
       end do
                 end if
      do k=1,n3m
      zzm(k)=(zz(k)+zz(k+1))*0.5
c$$$$$$$$$$$$$Computation of metric for non-uniform grids in x3$$

      g3rm(k)=(zz(k+1)-zz(k))*dx3
      enddo
      do k=2,n3m
      g3rc(k)=(zz(k+1)-zz(k-1))*dx3*0.5
      enddo
      g3rc(1)=(zz(2)-zz(1))*dx3
      g3rc(n3)= (zz(n3)-zz(n3m))*dx3
c
c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

      close(79)
      close(78)
      return                                                            
      end                                                               
c************************************************************************
c                                                                       *
      subroutine openfi                                                 *
c                                                                       *
c************************************************************************
      include 'param.f'
      open(46,file='../nftr3dcy')
      read(46,'(a)')filcnw
      read(46,'(a)')filcnr
      read(46,'(a)')filth
      read(46,'(a)')filvm
      read(46,'(a)')filpo
      read(46,'(a)')filen
      read(46,'(a)')filet
      read(46,'(a)')filer
      read(46,'(a)')filez
      read(46,'(a)')filed
      read(46,'(a)')filev
      open(32,file=filth)
      open(33,file=filvm)
      open(34,file=filpo)
      open(39,file=filen)
      open(40,file=filet)
      open(41,file=filer)
      open(42,file=filez)
      open(49,file=filed)
      open(50,file='piqm.out')
      open(59,file='piav.out')
      rewind 12
      rewind 33
      rewind 34
      rewind 32
      rewind 39
      rewind 40
      rewind 41
      rewind 42
      rewind 49
      rewind 48
      return
      end   
c************************************************************************
c                                                                       *
c  ****************************** subrout inirea ********************** *
c     read input flow fields                                            *
c                                                                       *
c************************************************************************
      subroutine inirea(ntil,time,ntt,ncount,nap)
      include 'param.f'
      common/ichtim/itimcf,itimcf1
      character*67 namfil
      itime=nint(time)
      write(ipfi,82)itime
   82 format(i4.4)
      namfil='field'//ipfi//'.dat'
c     write(6,*)'     legge da ',namfil
      open(13,file=namfil,form='unformatted')
      nfil=13                                                           
      read(nfil) n1l,n2l,n3l                                        
      read(nfil) epsil,lamb,re,timl 
      write(6,*)' legge da ',namfil,'     ntime=',ntil,
     1          '  n1l,n2l,n3l ',n1l,n2l,n3l
      read(nfil)  (((q1(i,j,k),i=1,n1l),j=1,n2l),k=1,n3l),           
     1            (((q2(i,j,k),i=1,n1l),j=1,n2l),k=1,n3l),        
     1            (((q3(i,j,k),i=1,n1l),j=1,n2l),k=1,n3l),
     1            (((psc(i,j,k),i=1,n1l),j=1,n2l),k=1,n3l),
     1            (((pr(i,j,k),i=1,n1l),j=1,n2l),k=1,n3l)      
      read(nfil) ntii,ntt
      return                                                            
      end                                                               
c************************************************************************
c                                                                       *
c  ****************************** subrout initia ********************** *
c     initial zero conditions in the whole field.                       *
c                                                                       *
c************************************************************************
      subroutine initia
      include 'param.f'
      do 4 j=1,n2                                                       
      do 4 i=1,n1                                                     
      do 4 k=1,n3                                                       
      pr(i,j,k)=0.                                                      
      q1(i,j,k)=0.                                                      
      q2(i,j,k)=0.                                                      
      q3(i,j,k)=0.                                                      
    4 continue                                                          
      return                                                            
      end                                                               
