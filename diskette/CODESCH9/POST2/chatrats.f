c************************************************************************
c                                                                       *
c                                                                       *
c     this code is a post processing code to evaluate the statistics    *
c     and the spectra and cospectra from the field generated by the     *
c     code in CODESCH9/CHA.                                             *
c     All variables are calculated in a staggered grid:                 *
c     This version reads the field where pressure and q2 velocity       *
c     were written.                                                     *
c     Pay attention in which directory to put the fields.
c                                                                       *
c************************************************************************
      program main                                                      
      include 'param.f'
      common/timavg/timav
      common/timini/timei
      common/npjet/n2t
      common/nbal/nba,ibudg
      common/strpar/str2
      open(15,file='chastat.d')
      read(15,*) n1,n2,n3,nsst
      read(15,*) nwrit,nread,iav,iprfi
      read(15,*) alx3d,alx1d,str2
      read(15,*) ren,vper
      read(15,*) dt,ntst,nprint,nprde,npouth
      read(15,*) nstop
      read(15,*) icfl,cflc,tpin,tprin,tfin                      
      read(15,*) jri,jrf,djr,irejr,iruuca
      read(15,*) timei
      read(15,*) islv1s,islv1n,islv3s,islv3n
      read(15,*) tosc,uosc
      read(15,*) flowq2,tau2,tim0sl
      read(15,*) y1gsd,y1ssd,y3gsd,y3ssd
      read(15,*) y1disd,y3disd 
      read(15,*) ifield
      read(15,*) itot,icorspe,icorr,timav,ibudg
301   format(a4)                                                        
      pi=2.*asin(1.)
      n1m=n1-1
      n2m=n2-1
      n3m=n3-1
      alx1=alx1d*pi
      alx3=alx3d*pi
      y1gsl=y1gsd*pi
      y1ssl=y1ssd*pi
      y3gsl=y3gsd*pi
      y3ssl=y3ssd*pi
      y1disl=y1disd*pi
      y3disl=y3disd*pi
c
      write(6,112)alx1d,alx3d
  112 format(10x,'chann. dimens ly=2',3x,'lx=',f4.2,'*pi'
     1        ,3x,'lz=',f4.2,'*pi')
      write(6,201)vper
      write(6,200)
  200 format(10x,'3d channel periodic in x3 and x1 ')
  201 format(3x,'programma con init. random perturbation'
     1   ,5x,'vper',e10.3)
      write(6,202) tosc,uosc
  202 format(10x,'parete inferiore, tosc=',e11.4,'uosc=',e11.4)
c                                                                       
      call openfi
      write(6,*)'*************************************************'
      write(32,*)'*************************************************'
      write(6,*)'*                                                *'
      write(32,*) '*                                              *'
      write(6,*)'*      CHANNEL WITH WALL TRANSPIRATION           *'
      write(32,*)'*      CHANNEL WITH WALL TRANSPIRATION           *'
      write(6,*)'*      staistics from fields                     *'
      write(32,*)'*     staistics from fields                     *'
      write(6,*)'*************************************************'
      write(32,*)'*************************************************'
      write(6,*)'  '
      write(32,*) '  '
      write(6,*)'  '
      write(32,*) '  '
c                                                                       
      call solve                                                        
      stop                                                              
      end                                                               
c************************************************************************
c************************************************************************
c                                                                       *
c                                                                       *
c    This post processing code requires some of the routines            * 
c    used in the code in CODESCH9/CHA to perform the simulation         * 
c                                                                       *
c                                                                       *
c************************************************************************
c************************************************************************
      subroutine solve                                                  
      include 'param.f'
      common/tima3/tiax3d
      common/timavg/timav
      common/timini/timei
      common/nbal/nba,ibudg
      common/iolfil/iovco,iohel
      common/ipdf/iquapd
      common/jspc/jspe,ifftco
      character*3 njpse
c
c*******************************************************
c                                                                       
c     grid definition, indices and mesh size calculation                          
c                                                                       
      call meshes
      call indic                                                        
      call cordin                                                       
c
c
c
301   format(a4)                                                        
      read(15,301) dummy
       read(15,*) npq,(jprq(n),n=1,npq),iquapd
       do n=1,npq
       write(6,*)'n,jprq(n) ',n,jprq(n)
       enddo
       npqf=npq
       ioldf=0
       iovco=0
       iohel=0
c
c     print some informations on the run
c
      write(6,*) '  '
      write(32,*) '  '
      write(6,754)n1,n2,n3                                              
      write(32,754)n1,n2,n3                                             
  754 format(10x,'number of grid points :'/                             
     1      5x,'n1=',i4,2x,'n2=',i4,2x,'n3=',i4/)                       
      write(6,*) '  '
      write(32,*) '  '
      write(6,755) ren,dt
      write(32,755) ren,dt
  755 format(3x,' Parameters of the flow: ',/,
     1 ' Reynolds number = ',e10.3,3x,'dt=',e10.3) 
      write(6,*) '  '
      write(32,*) '  '
      re=ren
      time=0.                                                           
      ntii=0                                                            
      beta=dt/re*0.5                                                    
            nap=0                                                           
            nav=0                                                           
            nvv=0                                                           
            nba=0
c
c  evaluation of metric quantities for the inversion
c
      call coetar
      call fftqua
      ifftco=0
  159 format(1x,i4,2x,e10.4,3e10.3,3(1x,e10.4,1x,i3,1x,i3),e10.3)
c
c*******************************************************
c
c                                                                       
c  ********* with iquapd =1 write some large file necessary to
c  perform the calculation of PDF of certain quantities
c  by a post processing code in CODESCH9/POST1
c                                                                       
      if(iquapd.eq.1) then
      ncount=0
      nfile=70
      namfile='lowalpdf'
      open(nfile,file=namfile,form='unformatted')
      nfile=69
      namfile='upwalpdf'
      open(nfile,file=namfile,form='unformatted')
            npq=1
      do jc=n2m,1,-1
      if(jc.eq.jprq(npq)) then
      nfile=71+npq
      write(njpse,177) jc
  177 format(i3.3)
      namfile='quapdf'//njpse
      open(nfile,file=namfile,form='unformatted')
            npq=npq+1
                          endif
      enddo
                      endif


      ntii=1
       time=timei
      write(6,*)'ntii,ntst,dt   ',ntii,ntst,dt
      do 350 ntime=ntii,ntst                                           
c
c  in tscheme the field is read
c
      call tschem(ntime,time,ncount)
       ncount=ncount+1
c
        ntt=ntt+1
c                                                                       
c*******************************************************
c                                                                       
c     in the outh routine the statistics are calculated
c     and written at the desired time
c                                                                       
c*******************************************************
           call outh(time,nav,ntime,cflm,nvv,navbu)            
         if(ntime.eq.ntst) go to 351
        time=time+dt
  350 continue                                                          
  351 continue                                                          
      nfile=70
      close(nfile)
      nfile=69
      close(nfile)
            npq=1
      do jc=n2m,1,-1
      if(jc.eq.jprq(npq)) then
      nfile=71+npq
      close(nfile)
            npq=npq+1
                          endif
      enddo
      return                                                            
      end                                                               
c************************************************************************
c                                                                       *
c ****************************** subrout coetar  **********************  *
c                                                                       *
c    this subroutine calculates the coefficients for the              *
c    integration of the q3 equation to evaluate the pressure gradient   *
c    and hence the wall friction     
c                                                                       *
c************************************************************************
      subroutine coetar
      include 'param.f'
      common/cor3j/ap3j(m2),ac3j(m2),am3j(m2)
c
c  *******   coefficients in several eq. funct of j
c
      do jc=1,n2m
      udx1q(jc)=dx1q
      volz(jc)=caj(jc)/(dx1*dx2*dx3)
      enddo
c
c  ***********  coefficients for q3   inner points
c
      do jc=2,n2m-1
       jp=jc+1
       jm=jc-1
       ucaj=1./caj(jc)
       ap3j(jc)=1./cac(jp)*ucaj
       ac3j(jc)=(1./cac(jp)+1./cac(jc))*ucaj
       am3j(jc)=1./cac(jc)*ucaj
      end do
c
c   set up the cefficients apj1, acj1, amj1 at the boundaries
c
c  jc=1
      ucaj=4./(2.*cac(2)+caj(1))
      ap3j(1)=1./cac(2)*ucaj
      ac3j(1)=(1./cac(2)+2./cac(1))*ucaj
      am3j(1)=0.
c  jc=n2m
      ucaj=4./(2.*cac(n2m)+caj(n2m))
      ap3j(n2m)=0.
      ac3j(n2m)=(2./cac(n2)+1./cac(n2m))*ucaj
      am3j(n2m)=1./cac(n2m)*ucaj
      return
      end
c************************************************************************
c                                                                       *
c ****************************** subrout prgqso  ********************** *
c  this subroutine performs the calculation of pressure gradient     *
c                                                                       *
c************************************************************************
      subroutine prgqso              
      include 'param.f'
      common/cor3j/ap3j(m2),ac3j(m2),am3j(m2)
      pi=2.*asin(1.)
      alre=al/ren
c
c
c    Pressure gradient
c
      alre=al/ren
      s3tot=0.
      do 18 kc=1,n3m
      km=kmv(kc)
      kp=kpv(kc)
      do 18 jc=1,n2m
      jmm=jmv(jc)
      jpp=jpv(jc)
      do 18 ic=1,n1m
      im=imv(ic)
      ip=ipv(ic)
c
c   11 second derivatives of q3
c
      dq31=(q3(ip,jc,kc)-2.*q3(ic,jc,kc)+q3(im,jc,kc))*dx1q
c
c   22 second derivatives of q3
c
      dq32=(ap3j(jc)*q3(ic,jpp,kc)
     1     -ac3j(jc)*q3(ic,jc,kc)
     1     +am3j(jc)*q3(ic,jmm,kc))*dx2q
c
c   33 second derivatives of q3
c
      dq33=(q3(ic,jc,kp)-2.*q3(ic,jc,kc)+q3(ic,jc,km))*dx3q
      dcq3=dq31+dq33+dq32
      s3tot=s3tot+dcq3*caj(jc)/ren
   18 continue
      dp3ns=s3tot/(2.*n1m*n2m*n3m)
      return
      end
c                                                                       
c  **************  subrout tschem                                       
c                                                                       
      subroutine tschem(ntime,time,ncount)
      include 'param.f'
      dimension voz1(m1),vot1(m1)
      common/timavg/timav
      common/timini/timei
      common/nbal/nba,ibudg
      common/jspc/jspe,ifftco
      common/wavin/dlx1,dlx3,dkk1,dkk3
      dimension enejtf(7,m2)
      dimension enejme(7,m2)
      dimension ene3ma(7),ene1ma(7)
      dimension en3ki(7,m3+1,m1m)
      dimension en1ik(7,m1+1,m3m)
c
c   read the field     
c
          call inirea(ntime,time,ntt,ncount,nap)           
c
c    check whether the field is solenoidal
c
          call divgck(dmax,dtot)                                 
          write(6,900)dmax,dtot                 ,ntime
          write(32,900)dmax,dtot                ,ntime
  900   format(3x,'maxima local and global divergence of the read field',
     1     /,' dmax = ',e11.4,' dtot = ',e11.4,'ntime=',i5)
c
c   evaluates the pressure gradient
c
          call prgqso
c
c    evaluates the mean velocity profile averaging in x1-x3 planes
c
           call velc
c
c    evaluates the mean vorticity profile averaging in x1-x3 planes
c
           call vorc
      n3mh=n3m/2+1
      n1mh=n1m/2+1
c
c    evaluates the cospectra and spectra if icorspe = 1
c    remember that the spectra are evaluated at the
c    location j+1/2 coinciding with the location
c    where q1 and q3  are calculated
c    q2 is evaluated at j+1/2 by q2 at j and at j+1
c
      if(icorspe.eq.1) then
      nba=nba+1
      dvotz=1./float(n1m*n3m)
      n2rm=n2m
      n2r=n2
      npq=1
      avg13=1./float(n1m*n3m)
      avg3=1./float(k3max)
      avg1=1./float(k1max)
      dk1=1.
      dk3=1.
      do j=n2m,1,-1
      do l=1,7
      enejtf(l,j)=0.
      enejme(l,j)=0.
      do i=1,n1m
      do k=1,n3m
      en3ki(l,k,i)=0.
      en1ik(l,i,k)=0.
      enddo
      enddo
      enddo
      if(j.eq.jprq(npq)) then
c
c   fluctuation spanwise velocity
c
      write(6,*)'velo',(vmepo(l,j),l=1,3)
      write(6,*)'vort',(vompo(l,j),l=1,3)
      do i=1,n1m
      do k=1,n3m
      rhs(i,j,k)=q1(i,j,k)-vmepo(1,j)
      enejtf(1,j)=enejtf(1,j)+rhs(i,j,k)**2
      enejme(1,j)=enejme(1,j)+rhs(i,j,k)
      enddo
      enddo
      enejtf(1,j)=enejtf(1,j)*avg13
      enejme(1,j)=enejme(1,j)*avg13
c
c   streamwise inverse fft x3  q1 velocity
c
           call ruux3(j,en3ki,1)
c
c   spanwise inverse fft x1   q1 velocity
c
c     write(6,*)'v1 ruux1  enter at j=',j
           call ruux1(j,en1ik,1)
c
c   fluctuation normal velocity
c
      jp=j+1
      do k=1,n3m
      do i=1,n1m
      q2med=(q2(i,j,k)-vmepo(2,j)+q2(i,jp,k)-vmepo(2,jp))*0.5
      rhs(i,j,k)=q2med
      enejtf(2,j)=enejtf(2,j)+rhs(i,j,k)**2
      enejme(2,j)=enejme(2,j)+rhs(i,j,k)
      enddo
      enddo
      enejtf(2,j)=enejtf(2,j)*avg13
      enejme(2,j)=enejme(2,j)*avg13
c
c   streamwise inverse fft x3  q2 velocity
c
           call ruux3(j,en3ki,2)
c
c   spanwise inverse fft x1   q2 velocity
c
c
c   q2 velocity correlation
c
c
           call ruux1(j,en1ik,2)
c
c    fluctuation streamwise velocity
c
      do i=1,n1m
      do k=1,n3m
      rhs(i,j,k)=q3(i,j,k)-vmepo(3,j)
      enejtf(3,j)=enejtf(3,j)+rhs(i,j,k)**2
      enejme(3,j)=enejme(3,j)+rhs(i,j,k)
      enddo
      enddo
      enejtf(3,j)=enejtf(3,j)*avg13
      enejme(3,j)=enejme(3,j)*avg13
c
c   spanwise inverse fft x1   q3 velocity
c
           call ruux1(j,en1ik,3)
c
c   streamwise inverse fft x3  q3 velocity
c
c
           call ruux3(j,en3ki,3)
c
c   fluctuation streamwise vorticity o3 spectra
c   o3  at j+1/2 by o3 at j and at j+1
c
      jc=j
      jp=j+1
      jm=j-1
            do kc=1,n3m
                  do ic=1,n1m
      im=imv(ic)
      dq1x2=(q1(ic,jp,kc)-q1(ic,jc,kc))/(y2s(jp)-y2s(jc))
      dq2x1=(q2(ic,jp,kc)-q2(im,jp,kc))*dx1
      vorp=-(dq1x2-dq2x1)
      dq1x2=(q1(ic,jc,kc)-q1(ic,jm,kc))/(y2s(jc)-y2s(jm))
      dq2x1=(q2(ic,jc,kc)-q2(im,jc,kc))*dx1
      vorm=-(dq1x2-dq2x1)
      rhs(ic,jc,kc)=(vorp-vompo(3,jp)+vorm-vompo(3,jc))*0.5
      enejtf(6,jc)=enejtf(6,jc)+rhs(ic,jc,kc)**2
      enejme(6,jc)=enejme(6,jc)+rhs(ic,jc,kc)
                  enddo
            enddo
      enejtf(6,jc)=enejtf(6,jc)*avg13
      enejme(6,jc)=enejme(6,jc)*avg13
c
c   spanwise inverse fft x1   om3 vorticity
c
           call ruux1(j,en1ik,6)
c
c   streamwise inverse fft x3  om3 vorticity
c
c
           call ruux3(j,en3ki,6)
c
c   fluctuation spanwise vorticity o1 spectra
c   o1  at j+1/2 by o3 at j and at j+1
c
            do ic=1,n1m
      im=imv(ic)
                  do kc=1,n3m
      km=kmv(kc)
      dq3x2=(q3(ic,jp,kc)-q3(ic,jc,kc))/(y2s(jp)-y2s(jc))
      dq2x3=(q2(ic,jp,kc)-q2(ic,jp,km))*dx3
      vorp=-(dq2x3-dq3x2)
      dq3x2=(q3(ic,jc,kc)-q3(ic,jm,kc))/(y2s(jc)-y2s(jm))
      dq2x3=(q2(ic,jc,kc)-q2(ic,jc,km))*dx3
      vorm=-(dq2x3-dq3x2)
      rhs(ic,jc,kc)=(vorp-vompo(1,jp)+vorm-vompo(1,jc))*0.5
      enejtf(4,jc)=enejtf(4,jc)+rhs(ic,jc,kc)**2
      enejme(4,jc)=enejme(4,jc)+rhs(ic,jc,kc)
                  enddo
            enddo
      enejtf(4,jc)=enejtf(4,jc)*avg13
      enejme(4,jc)=enejme(4,jc)*avg13
c
c   spanwise inverse fft x1   om1 vorticity
c
           call ruux1(j,en1ik,4)
c
c   streamwise inverse fft x3  om1 vorticity
c
c
           call ruux3(j,en3ki,4)
c               endif
c
c  normal  vorticity component  O2 at j+1/2
c
            do ic=1,n1m
      im=imv(ic)
                  do kc=1,n3m
      km=kmv(kc)
      dq3x1=(q3(ic,jc,kc)-q3(im,jc,kc))*dx1
      dq1x3=(q1(ic,jc,kc)-q1(ic,jc,km))*dx3
      rhs(ic,jc,kc)=-(dq3x1-dq1x3)-vompo(2,jc)
      enejtf(5,jc)=enejtf(5,jc)+rhs(ic,jc,kc)**2
      enejme(5,jc)=enejme(5,jc)+rhs(ic,jc,kc)
                  enddo
            enddo
      enejtf(5,jc)=enejtf(5,jc)*avg13
      enejme(5,jc)=enejme(5,jc)*avg13
c
c   spanwise inverse fft x1   om2 vorticity
c
           call ruux1(j,en1ik,5)
c
c   streamwise inverse fft x3  om2 vorticity
c
c
           call ruux3(j,en3ki,5)
c
c  pressure           p              
c
      do i=1,n1m
      do k=1,n3m
      rhs(i,j,k)=pr(i,j,k)-pmed(j)
      enejtf(7,j)=enejtf(7,j)+rhs(i,j,k)**2
      enejme(7,j)=enejme(7,j)+rhs(i,j,k)
      enddo
      enddo
      enejtf(7,j)=enejtf(7,j)*avg13
      enejme(7,j)=enejme(7,j)*avg13
c
c   streamwise inverse fft x3  Pressure p  
c
           call ruux3(j,en3ki,7)
c
c   spanwise inverse fft x1   Pressure p  
c
           call ruux1(j,en1ik,7)
      do l=1,7
      ene3ma(l)=0.
      ene1ma(l)=0.
      do k=1,n3mh-1
      kp=2*k
      kd=2*k-1
            do i=1,n1m
      ene3ma(l)=max(abs(en3ki(l,kd,i)),ene3ma(l))
      ene3ma(l)=max(abs(en3ki(l,kp,i)),ene3ma(l))
            enddo
      enddo
      do i=1,n1mh-1
      ip=2*i
      id=2*i-1
                  do k=1,n3m
      ene1ma(l)=max(abs(en1ik(l,id,k)),ene1ma(l))
      ene1ma(l)=max(abs(en1ik(l,ip,k)),ene1ma(l))
                  enddo
      enddo
      enddo
      write(62,132)time,j,(ene3ma(l),l=1,7)
      write(62,133)time,j,(ene1ma(l),l=1,7)
  132 format(3x,'for spectra ene3ma at t= ',e10.3,2x,'j=',i3,3x,7e12.4)
  133 format(3x,'for spectra ene1ma at t= ',e10.3,2x,'j=',i3,3x,7e12.4)
      write(62,143)(enejme(l,j),l=1,7)
      write(62,142)(enejtf(l,j),l=1,7)
  142 format(3x,'           RMS^2                          ',3x,7e12.4)
  143 format(3x,'         Mean value                       ',3x,7e12.4)
      call cospec(j,en3ki,en1ik)
c
c   FINE DO J
c
      npq=npq+1
                        endif
              enddo
          endif
      return                                                            
      end                                                               
c                                                                       
c  **************  subrout cospec                                       
c                                                                       
      subroutine cospec(j,en3ki,en1ik)
c
c  in this subroutine the spectra and cospectra
c  in the STREAMWISE x3 and SPANWISE x1 are calculated
c  for the VELOCITY and VORTICITY components
c
      include 'param.f'
      common/wavin/dlx1,dlx3,dkk1,dkk3
      dimension en3ki(7,m3+1,m1m)
      dimension en1ik(7,m1+1,m3m)
c
c  Spectra and correlations  velocity 1 component
c
      call cospx3(j,en3ki,1,1)
c     write(6,*)'in cospec 1 ',j,r11x3(j,1),corx3(j,1)
      do k=1,k3max
      ene1zo(j,k)=ene1zo(j,k)+ene3(j,k)
      r11x3(j,k)=r11x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,1,1)
      do k=1,k1max
      ene1to(j,k)=ene1to(j,k)+ene1(j,k)
      r11x1(j,k)=r11x1(j,k)+corx1(j,k)
      enddo
c
c  Spectra and correlations  velocity 2 component
c
      call cospx3(j,en3ki,2,2)
c     write(6,*)'in cospec 2 ',j,r22x3(j,1),corx3(j,1)
      do k=1,k3max
      ene2zo(j,k)=ene2zo(j,k)+ene3(j,k)
      r22x3(j,k)=r22x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,2,2)
      do k=1,k1max
      ene2to(j,k)=ene2to(j,k)+ene1(j,k)
      r22x1(j,k)=r22x1(j,k)+corx1(j,k)
      enddo
c
c  Spectra and correlations  velocity 3 component
c
      call cospx3(j,en3ki,3,3)
c     write(6,*)'in cospec 3 ',j,r33x3(j,1),corx3(j,1)
      do k=1,k3max
      ene3zo(j,k)=ene3zo(j,k)+ene3(j,k)
      r33x3(j,k)=r33x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,3,3)
      do k=1,k1max
      ene3to(j,k)=ene3to(j,k)+ene1(j,k)
      r33x1(j,k)=r33x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  12 velocity component
c
      call cospx3(j,en3ki,1,2)
      do k=1,k3max
      en12zo(j,k)=en12zo(j,k)+ene3(j,k)
      r12x3(j,k)=r12x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,1,2)
      do k=1,k1max
      en12to(j,k)=en12to(j,k)+ene1(j,k)
      r12x1(j,k)=r12x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  13 velocity component
c
      call cospx3(j,en3ki,1,3)
      do k=1,k3max
      en13zo(j,k)=en13zo(j,k)+ene3(j,k)
      r31x3(j,k)=r31x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,1,3)
      do k=1,k1max
      en13to(j,k)=en13to(j,k)+ene1(j,k)
      r31x1(j,k)=r31x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  23 velocity component
c
      call cospx3(j,en3ki,2,3)
      do k=1,k3max
      en23zo(j,k)=en23zo(j,k)+ene3(j,k)
      r23x3(j,k)=r23x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,2,3)
      do k=1,k1max
      en23to(j,k)=en23to(j,k)+ene1(j,k)
      r23x1(j,k)=r23x1(j,k)+corx1(j,k)
      enddo
c
c  Spectra and correlations  vorticity 1 component
c
      call cospx3(j,en3ki,4,4)
      do k=1,k3max
      env11z(j,k)=env11z(j,k)+ene3(j,k)
      v11x3(j,k)=v11x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,4,4)
      do k=1,k1max
      env11t(j,k)=env11t(j,k)+ene1(j,k)
      v11x1(j,k)=v11x1(j,k)+corx1(j,k)
      enddo
c
c  Spectra and correlations  vorticity 2 component
c
      call cospx3(j,en3ki,5,5)
      do k=1,k3max
      env22z(j,k)=env22z(j,k)+ene3(j,k)
      v22x3(j,k)=v22x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,5,5)
      do k=1,k1max
      env22t(j,k)=env22t(j,k)+ene1(j,k)
      v22x1(j,k)=v22x1(j,k)+corx1(j,k)
      enddo
c
c  Spectra and correlations  vorticity 3 component
c
      call cospx3(j,en3ki,6,6)
      do k=1,k3max
      env33z(j,k)=env33z(j,k)+ene3(j,k)
      v33x3(j,k)=v33x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,6,6)
      do k=1,k1max
      env33t(j,k)=env33t(j,k)+ene1(j,k)
      v33x1(j,k)=v33x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  12 vorticity component
c
      call cospx3(j,en3ki,4,5)
      do k=1,k3max
      env12z(j,k)=env12z(j,k)+ene3(j,k)
      v12x3(j,k)=v12x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,4,5)
      do k=1,k1max
      env12t(j,k)=env12t(j,k)+ene1(j,k)
      v12x1(j,k)=v12x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  13 vorticity component
c
      call cospx3(j,en3ki,4,6)
      do k=1,k3max
      env13z(j,k)=env13z(j,k)+ene3(j,k)
      v31x3(j,k)=v31x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,4,6)
      do k=1,k1max
      env13t(j,k)=env13t(j,k)+ene1(j,k)
      v31x1(j,k)=v31x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  23 vorticity component
c
      call cospx3(j,en3ki,5,6)
      do k=1,k3max
      env23z(j,k)=env23z(j,k)+ene3(j,k)
      v23x3(j,k)=v23x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,5,6)
      do k=1,k1max
      env23t(j,k)=env23t(j,k)+ene1(j,k)
      v23x1(j,k)=v23x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  1 velocity vorticity 1
c
      call cospx3(j,en3ki,1,4)
      do k=1,k3max
      evo11z(j,k)=evo11z(j,k)+ene3(j,k)
      vo11x3(j,k)=vo11x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,1,4)
      do k=1,k1max
      evo11t(j,k)=evo11t(j,k)+ene1(j,k)
      vo11x1(j,k)=vo11x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  1 velocity vorticity 2
c
      call cospx3(j,en3ki,1,5)
      do k=1,k3max
      evo12z(j,k)=evo12z(j,k)+ene3(j,k)
      vo12x3(j,k)=vo12x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,1,5)
      do k=1,k1max
      evo12t(j,k)=evo12t(j,k)+ene1(j,k)
      vo12x1(j,k)=vo12x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  1 velocity vorticity 3
c
      call cospx3(j,en3ki,1,6)
      do k=1,k3max
      evo13z(j,k)=evo13z(j,k)+ene3(j,k)
      vo13x3(j,k)=vo13x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,1,6)
      do k=1,k1max
      evo13t(j,k)=evo13t(j,k)+ene1(j,k)
      vo13x1(j,k)=vo13x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  2 velocity vorticity 1
c
      call cospx3(j,en3ki,2,4)
      do k=1,k3max
      evo21z(j,k)=evo21z(j,k)+ene3(j,k)
      vo21x3(j,k)=vo21x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,2,4)
      do k=1,k1max
      evo21t(j,k)=evo21t(j,k)+ene1(j,k)
      vo21x1(j,k)=vo21x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  2 velocity vorticity 2
c
      call cospx3(j,en3ki,2,5)
      do k=1,k3max
      evo22z(j,k)=evo22z(j,k)+ene3(j,k)
      vo22x3(j,k)=vo22x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,2,5)
      do k=1,k1max
      evo22t(j,k)=evo22t(j,k)+ene1(j,k)
      vo22x1(j,k)=vo22x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  2 velocity vorticity 3
c
      call cospx3(j,en3ki,2,6)
      do k=1,k3max
      evo23z(j,k)=evo23z(j,k)+ene3(j,k)
      vo23x3(j,k)=vo23x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,2,6)
      do k=1,k1max
      evo23t(j,k)=evo23t(j,k)+ene1(j,k)
      vo23x1(j,k)=vo23x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  3 velocity vorticity 1
c
      call cospx3(j,en3ki,3,4)
      do k=1,k3max
      evo31z(j,k)=evo31z(j,k)+ene3(j,k)
      vo31x3(j,k)=vo31x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,3,4)
      do k=1,k1max
      evo31t(j,k)=evo31t(j,k)+ene1(j,k)
      vo31x1(j,k)=vo31x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  3 velocity vorticity 2
c
      call cospx3(j,en3ki,3,5)
      do k=1,k3max
      evo32z(j,k)=evo32z(j,k)+ene3(j,k)
      vo32x3(j,k)=vo32x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,3,5)
      do k=1,k1max
      evo32t(j,k)=evo32t(j,k)+ene1(j,k)
      vo32x1(j,k)=vo32x1(j,k)+corx1(j,k)
      enddo
c
c  Cospectra and correlations  3 velocity vorticity 3
c
      call cospx3(j,en3ki,3,6)
      do k=1,k3max
      evo33z(j,k)=evo33z(j,k)+ene3(j,k)
      vo33x3(j,k)=vo33x3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,3,6)
      do k=1,k1max
      evo33t(j,k)=evo33t(j,k)+ene1(j,k)
      vo33x1(j,k)=vo33x1(j,k)+corx1(j,k)
      enddo
c
c  Spectra and correlations  pressure  
c
      call cospx3(j,en3ki,7,7)
c     write(6,*)'in cospec 1 ',j,r11x3(j,1),corx3(j,1)
      do k=1,k3max
      enepzo(j,k)=enepzo(j,k)+ene3(j,k)
      pcox3(j,k)=pcox3(j,k)+corx3(j,k)
      enddo
      call cospx1(j,en1ik,7,7)
      do k=1,k1max
      enepto(j,k)=enepto(j,k)+ene1(j,k)
      pcox1(j,k)=pcox1(j,k)+corx1(j,k)
      enddo
      return 
      end
c
c   ********************* subr inspru
c
      subroutine inspru(nba)
      include 'param.f' 
            nba=0
      do jc=1,n2m
      do i=1,n1m
      v11x1(jc,i)=0.
      v22x1(jc,i)=0.
      v33x1(jc,i)=0.
      r11x1(jc,i)=0.
      r22x1(jc,i)=0.
      r33x1(jc,i)=0.
      pcox1(jc,i)=0.
      vo11x1(jc,i)=0.
      vo12x1(jc,i)=0.
      vo13x1(jc,i)=0.
      vo21x1(jc,i)=0.
      vo22x1(jc,i)=0.
      vo23x1(jc,i)=0.
      vo31x1(jc,i)=0.
      vo32x1(jc,i)=0.
      vo33x1(jc,i)=0.
      enddo
      do k=1,n3m
      v11x3(jc,k)=0.
      v22x3(jc,k)=0.
      v33x3(jc,k)=0.
      r11x3(jc,k)=0.
      r22x3(jc,k)=0.
      r33x3(jc,k)=0.
      pcox3(jc,k)=0.
      vo11x3(jc,k)=0.
      vo12x3(jc,k)=0.
      vo13x3(jc,k)=0.
      vo21x3(jc,k)=0.
      vo22x3(jc,k)=0.
      vo23x3(jc,k)=0.
      vo31x3(jc,k)=0.
      vo32x3(jc,k)=0.
      vo33x3(jc,k)=0.
      enddo
      do k=1,k1max
      evo11t(jc,k)=0.
      evo12t(jc,k)=0.
      evo13t(jc,k)=0.
      evo21t(jc,k)=0.
      evo22t(jc,k)=0.
      evo23t(jc,k)=0.
      evo31t(jc,k)=0.
      evo32t(jc,k)=0.
      evo33t(jc,k)=0.
      en12to(jc,k)=0.
      en13to(jc,k)=0.
      en23to(jc,k)=0.
      env12t(jc,k)=0.
      env13t(jc,k)=0.
      env23t(jc,k)=0.
      ene1to(jc,k)=0.
      ene2to(jc,k)=0.
      ene3to(jc,k)=0.
      enepto(jc,k)=0.
      enddo
      enddo
      do jc=1,n2m
      do k=1,k3max
      ene1zo(jc,k)=0.
      ene2zo(jc,k)=0.
      ene3zo(jc,k)=0.
      enepzo(jc,k)=0.
      evo11z(jc,k)=0.
      evo12z(jc,k)=0.
      evo13z(jc,k)=0.
      evo21z(jc,k)=0.
      evo22z(jc,k)=0.
      evo23z(jc,k)=0.
      evo31z(jc,k)=0.
      evo32z(jc,k)=0.
      evo33z(jc,k)=0.
      en12zo(jc,k)=0.
      en13zo(jc,k)=0.
      en23zo(jc,k)=0.
      env12z(jc,k)=0.
      env13z(jc,k)=0.
      env23z(jc,k)=0.
      enddo
      enddo
      return
      end
